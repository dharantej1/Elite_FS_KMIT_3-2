/*
Xavier working on bitwise operations on integer elements.
He is trying to find the maximum XOR value of two elements.
You will be given a list of integers elements list[],
Your task is to findout the maximum XOR value of two elements 
from the given list.

Input Format:
-------------
Line-1: An integer N, number of elements
Line-2: N space separated integers, Arrays of elements.

Output Format:
--------------
Print an integer, max value of XOR value of two elements.


Sample Input-1:
---------------
3
5 9 14

Sample Output-1:
----------------
12

Explanation:
------------
XOR of 5 and 9


Sample Input-2:
---------------
5
34 23 62 73 35

Sample Output-2:
----------------
119


Sample Input-3:
---------------
6
12 23 31 65 76 43

Sample Output-3:
----------------
106


==== testcases ====
case =1
input =5
34 23 62 73 35
output =119

case =2
input =6
12 23 31 65 76 43
output =106

case =3
input =3
5 9 14
output =12

case =4
input =15
1312449 2688478 11589416 2348242 1794385 8258526 2412993 1895562 9441490 11643818 11985329 4181028 10091439 3451530 1635559
output =15602444

case =5
input =25
832532 6058055 5558325 4822045 5307613 10545086 2435528 1722930 6043926 8381418 425750 12266086 3959617 1820131 4976556 10012344 5112356 1719556 8336743 3499959 2022504 8262221 4680806 9170017 5490931
output =16572072

case =6
input =50
107858 101272 59976 12610 17587 1911 121103 91906 60227 75014 117087 115791 21799 37304 76522 72014 963 47145 52089 7836 62109 56389 21955 6700 2275 66202 83546 33297 110864 122784 16899 43239 28321 111578 59667 104800 88429 105759 85916 121274 80029 84936 712 16498 61833 119203 120931 81154 91007 21135
output =130675

case =7
input =100
181660 218443 511103 545055 196221 470640 1070380 554889 685103 570926 1178839 824883 1174814 336858 353469 505898 601824 1173983 227001 428107 140912 506435 263645 986724 719860 521358 145148 498381 597795 988825 745136 864226 697679 1024296 1077296 211468 1078124 312078 334930 1037469 501696 845738 1203945 651358 1019488 374260 755699 689366 418251 1118982 851339 814811 509917 352150 827896 419486 424823 914487 211178 422455 783267 822462 1223425 686705 872241 73443 874953 95525 1009775 853274 336722 28906 178495 309342 215644 100100 512335 610903 1221882 369856 323058 898490 69727 460178 923874 669708 791970 888066 298308 364522 1106088 1184800 1136779 391917 1087241 478326 1223806 1082808 1154240 251412
output =2096998

case =8
input =250
11252 8618 10455 9710 8195 6145 2760 3952 4861 11900 7370 4227 7805 12157 552 3065 12334 5828 7085 3323 9853 10625 9205 4856 10149 29 9851 1213 1717 3246 4697 381 1237 8569 9080 10111 8761 431 8711 831 5443 2576 7661 8921 8391 1857 6556 8007 8525 10595 5986 8769 4987 2819 9860 4402 2007 9800 7058 12102 555 7814 623 11426 11450 10528 7967 999 10297 9370 10499 6472 7571 9913 12081 4179 9313 2088 11600 3081 9831 5064 11314 3725 8045 9493 8011 2170 5376 5231 6020 6432 1233 1280 10566 5770 1841 10085 10938 4376 4973 213 6380 6040 9581 1907 2924 12105 9281 3394 9936 2720 12042 6312 10564 3945 492 3543 7023 6585 4096 2058 374 9121 7878 5530 10072 10869 6828 6899 6645 2410 183 11260 6156 3868 11536 8569 11216 5015 7068 9123 3350 4710 4327 3792 2583 9581 8042 6061 11375 3618 11999 1026 2053 2673 1637 4523 9033 3341 5684 6473 386 1586 6027 10245 8779 687 1792 3193 3126 5259 5801 11527 5747 11499 3475 11019 3259 10258 80 4077 5032 9165 119 5682 3461 8315 8880 2220 5789 10608 10954 5630 293 10052 11765 2946 9893 7091 6340 8956 12119 4418 2528 6006 9489 5794 11538 844 2291 4232 2543 4996 739 11888 6375 3932 7801 6012 9454 10879 5293 525 10039 11826 12241 2007 6295 6222 8258 9011 971 7128 6472 1715 48 5416 2562 3643 2480 6616 11031 11403 6314 9406 8498 3654 634 337
output =16383


*/
import java.utill.*;

class MaxXOR {
	public int findMaximumXOR(int[] nums) {
		int maxNum = nums[0];
		for(int num : nums) maxNum = Math.max(maxNum, num);
		// length of max number in a binary representation
		int L = (Integer.toBinaryString(maxNum)).length();

		int maxXor = 0, currXor;
		Set<Integer> prefixes = new HashSet<>();
		for(int i = L - 1; i > -1; --i) {
			// go to the next bit by the left shift
			maxXor <<= 1;
			// set 1 in the smallest bit
			currXor = maxXor | 1;
			prefixes.clear();
			// compute all possible prefixes 
			// of length (L - i) in binary representation
			for(int num: nums) prefixes.add(num >> i);
			// Update maxXor, if two of these prefixes could result in currXor.
			// Check if p1^p2 == currXor, i.e. p1 == currXor^p2.
			for(int p: prefixes) {
				if (prefixes.contains(currXor^p)) {
					maxXor = currXor;
					break;
				}
			}
		}
		return maxXor;
	}

  	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int arr[]=new int[n];
		for(int i=0;i<n;i++)
			arr[i]=sc.nextInt();
		System.out.println(new MaxXOR().findMaximumXOR(arr));
	}
}