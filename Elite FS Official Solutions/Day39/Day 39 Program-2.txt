/*
Problem Statement:
------------------
A device is secured with a digital lock, 
The digital lock is made up of a 3*3 grid like below:
| 1 | 2 | 3 |
| 4 | 5 | 6 |
| 7 | 8 | 9 |

The lock is secured by creating pattern using the above grid.
A valid pattern as formed as follows:

Rules for a valid pattern:
	- Each pattern must connect at least m keys and at most n keys.
	- All the keys must be distinct.
	- If the line connecting two consecutive keys in the pattern passes through 
	  any other keys, the other keys must have already the part of the pattern. 
	  No jumps through a key which is not part of the pattern is allowed.
	- The order of keys used matters.
 
You will be given two integers m and n, where 1 ≤ m ≤ n ≤ 9, 
Your task is to count the total number of patterns of the device lock, 
which consist of minimum of m keys and maximum n keys. 

Examples of valid and invalid patterns:
	Invalid move: 4 - 1 - 3 - 6
	Line 1 - 3 passes through key 2 which had not been part of the pattern.

	Invalid move: 4 - 1 - 9 - 2
	Line 1 - 9 passes through key 5 which had not been part of the pattern.

	Valid move: 2 - 4 - 1 - 3 - 6
	Line 1 - 3 is valid because it passes through key 2, which had been part 
	of the pattern

	Valid move: 6 - 5 - 4 - 1 - 9 - 2
	Line 1 - 9 is valid because it passes through key 5, which had been part 
	of the pattern

Input Format:
-------------
Two space separated integers M and N.

Output Format:
--------------
Print an integer, number of valid patterns formed using the grid.


Sample Input-1:
---------------
1 1

Sample Output-1:
----------------
9


Sample Input-2:
---------------
1 2

Sample Output-2:
----------------
65


Test Cases:
----------
case =1
input =1 1
output =9

case =2
input =1 2
output =65

case =3
input =1 3
output =385

case =4
input =2 5
output =9152

case =5
input =2 9
output =389488

case =6
input =1 9
output =389497

case =7
input =3 7
output =108024

case =8
input =4 8
output =248408

*/

Solution:
---------
import java.util.*;

class UnlockPatterns{
    private int[][] jumps;
    private boolean[] visited;
    
    public int numberOfPatterns(int m, int n) {
        jumps = new int[10][10];
        jumps[1][3] = jumps[3][1] = 2;
        jumps[4][6] = jumps[6][4] = 5;
        jumps[7][9] = jumps[9][7] = 8;
        jumps[1][7] = jumps[7][1] = 4;
        jumps[2][8] = jumps[8][2] = 5;
        jumps[3][9] = jumps[9][3] = 6;
        jumps[1][9] = jumps[9][1] = jumps[3][7] = jumps[7][3] = 5;
        visited = new boolean[10];
        int count = 0;
        count += DFS(1, 1, 0, m, n) * 4; // 1, 3, 7, 9 are symmetrical
        count += DFS(2, 1, 0, m, n) * 4; // 2, 4, 6, 8 are symmetrical
        count += DFS(5, 1, 0, m, n);
        return count;
    }

    private int DFS(int num, int len, int count, int m, int n) {
        if (len >= m) count++; // only count if moves are larger than m
        len++;
        if (len > n) return count;
        visited[num] = true;
        for (int next = 1; next <= 9; next++) {
            int jump = jumps[num][next];
            if (!visited[next] && (jump == 0 || visited[jump])) {
                count = DFS(next, len, count, m, n);
            }
        }
        visited[num] = false; // backtracking
        return count;
    }
	public static void main(String args[] ) {
		Scanner sc = new Scanner(System.in);
		int m=sc.nextInt();
		int n=sc.nextInt();
		UnlockPatterns up=new UnlockPatterns();
		System.out.println(up.numberOfPatterns(m,n));
	}
}