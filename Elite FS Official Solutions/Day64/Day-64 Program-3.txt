/*
Problem Statement:
-----------------
You are task is to design an iterator that supports the peek operation on an
existing iterator in addition to the hasNext() and the next() operations.

Refer to https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html

Implement the SmartIterator class:
    - SmartIterator(Iterator<int> nums): Initializes the object with the given 
                                       Integer iterator 'iterator'.
The methods are:
    1. int next():  Returns the next element in the array and moves the 
                        pointer to the next element.
    
    2. boolean hasNext(): Returns 'true' if there are still elements in the array
    
    3. int peek():  Returns the next element in the array without moving 
                        the pointer.

Note: Each language may have a different implementation of the constructor and
Iterator, but they all support the int next() and boolean hasNext() functions.

Input Format:
-------------
Line-1: space separated integers, nums[] array, initialize SmartIterator with nums[].
Line-2: space separated integers, choices[], either 1,2 or 3.
        1. next(), 2.hasNext(), 3.peek()

Output Format:
--------------
Print the choices.length of answers.


Sample Input:
-------------
1 2 3 4 5
1 1 3 2 3 1

Sample Output:
--------------
1 2 3 true 3 3 

 
Test Cases:
----------
case =1
input =47 28 35 46 33 25 26 26 45 2 49 23 22 14 33 13 39 7 23 13 13 28 2 7 3
2 1 1 1 3 3 3 2 1 3 3 2 2 3 3 2 2 2 1 2 1 3 1 3 1 2 2 2 3 3 3 3 1 2 2
output =true 47 28 35 46 46 46 true 46 33 33 true true 33 33 true true true 33 true 25 26 26 26 26 true true true 45 45 45 45 45 true true 

case =2
input =194 91 48 189 22 52 133 148 42 66 188 156 75 140 112 53 198 131 104 45 78 116 26 164 31 130 2 139 167 76 175 54 136 105 200 95 173 121 43 109 159 167 34 178 68 16 121 151 122 16
1 2 1 3 1 1 1 2 1 2 2 1 2 1 2 2 2 1 2 1 2 1 1 1 3
output =194 true 91 48 48 189 22 true 52 true true 133 true 148 true true true 42 true 66 true 188 156 75 140 

case =3
input =107 220 86 181 163 125 194 268 51 137 201 52 260 118 31 207 500 226 398 495 200 495 278 474 401 45 225 220 33 151 289 351 283 216 460 78 424 411 336 45 135 6 70 317 317 400 366 51 298 366 310 389 289 24 193 15 5 304 149 246 302 435 344 120 207 302 498 410 208 135 128 115 40 408 95 298 392 258 16 490 90 156 358 152 342 335 58 101 203 60 190 95 418 10 73 244 348 444 2 379
2 1 1 3 2 1 1 2 2 1 1 1 1 2 1 3 2 3 2 2 2 1 1 2 3 2 2 3 2 1 1 3 1 3 2 2 2 2 1 1 1 1 2 1 3 3 1 1 2 1 3 2 2 1 2 2 1 2 3 3 1 1 2 3 1 1 3 1 3 3 2 2 3 2 1 1 3 2 2 3 1 2 2 1 1 2 2 1 1 1 1 3 3 1 2 1 2 2 3 3 1 1 1 3 1 2 1 3 3 2 3 2 2 2 2 3 3 2 1 3 1 2 1 2 2 2 2 2 1 3 1 2 1 3 2 1 2 1 1 2 1 3 2 3 3 1 2 1 2 2
output =true 107 220 86 true 86 181 true true 163 125 194 268 true 51 137 true 137 true true true 137 201 true 52 true true 52 true 52 260 118 118 31 true true true true 31 207 500 226 true 398 495 495 495 200 true 495 278 true true 278 true true 474 true 401 401 401 45 true 225 225 220 33 33 151 151 true true 151 true 151 289 351 true true 351 351 true true 283 216 true true 460 78 424 411 336 336 336 true 45 true true 135 135 135 6 70 317 317 true 317 400 400 true 400 true true true true 400 400 true 400 366 366 true 51 true true true true true 298 366 366 true 310 389 true 389 true 289 24 true 193 15 true 15 15 15 true 5 true true

case =4
input =82 171 300 96 132 314 138 422 143 458 161 307 158 293 320 32 209 374 20 170 370 288 20 237 436 37 360 140 199 305 429 254 417 8 327 101 402 476 11 207 232 425 87 493 337 317 164 291 198 412 266 181 37 36 298 277 353 449 197 312 304 163 155 321 369 461 7 40 411 213 11 386 438 294 349 486 252 160 303 451 481 304 264 42 307 339 85 24 442 240 428 309 499 399 305 62 481 236 30 383 249 456 219 336 108 50 83 158 491 415 182 274 243 317 356 3 293 338 30 440 456 493 302 391 431 429 120 489 192 238 438 84 73 447 173 252 312 440 6 86 123 426 376 7 111 411 497 416 3 445
2 1 2 1 1 3 1 3 1 3 3 2 2 2 1 2 3 1 1 3 1 3 1 2 2 2 1 2 1 1 1 3 1 2 2 1 1 2 3 2 1 3 2 1 3 1 1 1 2 2 3 1 1 2 3 3 2 3 2 2 2 3 2 2 1 3 3 3 2 1 3 1 3 1 3 2 2 1 3 3 2 1 1 2 2 1 2 1 2 3 1 2 1 3 2 2 1 2 1 1 2 2 3 3 3 2 2 1 3 3 1 3 3 1 2 2 3 3 2 2 1 2 2 1 2 2 3 2 1 3 1 3 1 2 1 2 1 2 2 2 3 1 2 3 3 2 2 3 1 2 1 1 3 2 2 3 2 3 3 2 1 3 1 2 3 3 3 2 1 3 1 1 1 2 1 2 2 2 3 2 2 2 2 1 2 1 3 2 3 3 1 1 2 1 3 1 3 2 1 2 3 2 3 2 3 1 2 1 2 2 1 3 1 2 3 2 2 2 3 1 2 1 1 2 1 2 1 1 1 3 1 3 2 2 1 3 2 3 3 2 2 3 2 2 2 3 1 1 1 2
output =true 82 true 171 300 96 96 132 132 314 314 true true true 314 true 138 138 422 143 143 458 458 true true true 161 true 307 158 293 320 320 true true 32 209 true 374 true 374 20 true 20 170 170 370 288 true true 20 20 237 true 436 436 true 436 true true true 436 true true 436 37 37 37 true 37 360 360 140 140 199 true true 199 305 305 true 305 429 true true 254 true 417 true 8 8 true 327 101 true true 101 true 402 476 true true 11 11 11 true true 11 207 207 207 232 232 232 true true 425 425 true true 425 true true 87 true true 493 true 493 337 337 317 317 true 164 true 291 true true true 198 198 true 412 412 true true 412 412 true 266 181 37 true true 37 true 37 37 true 37 36 36 true 298 298 298 true 298 277 277 353 449 true 197 true true true 312 true true true true 312 true 304 163 true 163 163 163 155 true 321 369 369 461 true 461 true 7 true 7 true 7 7 true 40 true true 411 213 213 true 11 true true true 11 11 true 386 438 true 294 true 349 486 252 160 160 303 true true 303 451 true 451 451 true true 451 true true true 451 451 481 304 true


*/

Solution:
--------
import java.util.*;

class NewIterator<T> implements Iterator<T> {
    private T forward = null;
    private Iterator<T> iterator;
	public NewIterator(Iterator<T> iterator) {
	    // initialize any member here.
	    this.iterator = iterator;
	}
	
    // Returns the next element in the iteration without advancing the iterator.
	public T peek() {
        if(forward!=null)return forward;
        if(iterator.hasNext()){
            forward = iterator.next();
        }
        return forward;
	}
	
	// hasNext() and next() should behave the same as in the Iterator interface.
	// Override them if needed.
	public T next() {
        T returnValue = null;
	    if(forward!=null){
            returnValue = forward;
            forward=null;
        }else if(iterator.hasNext()){
            returnValue = iterator.next();
        }
        return returnValue;
	}
	
	@Override
	public boolean hasNext() {
	    return forward!=null || iterator.hasNext();
	}
    
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        
        String arr[]=sc.nextLine().split(" ");
        List numbers = new ArrayList<>();
        for(String s:arr)
            numbers.add(Integer.parseInt(s));
        NewIterator<Integer> nItr = new NewIterator<>(numbers.iterator());
		
        String choices[]=sc.nextLine().split(" ");
        for(String s:choices){
            switch(Integer.parseInt(s)){
				case 1:
					System.out.print(nItr.next()+" ");
					break;
				case 2:
					System.out.print(nItr.hasNext()+" ");
					break;
				case 3:
					System.out.print(nItr.peek()+" ");
			}
		}
    }
}
