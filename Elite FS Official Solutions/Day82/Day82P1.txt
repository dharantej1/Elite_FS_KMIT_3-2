/*
Due to the heavy rains in TS & AP states, the road from 
Hyderabad to Kakinada destroyed at N places.
Let us assume Vijayawada is at the center bewteen Hyd and Kakinada
NHAI planned to call for fresh bids to repair these pool of destroyed roads.

The destroyed road is indicated as road[x]=[x-from, x-to], where 0 < = x < N 
-500 <= x-from < x-to <= 500. The road from Hyderabad to Vijayawada indicated 
with negative values, and Vijayawada to Kakinada indicated with positive values.

A destroyed road D2 = [r, s] follows a destroyed road D1 = [p, q] if q < r.
A pool of roads at different places can be formed in this way. 

NHAI given a task to you to find the size of maximum pool can be formed.
You do not need to use up all the given roads. You can select the roads in any order.

Note: Size is the number of destroyed roads in the pool.

Input Format:
-------------
Line-1: An integer N, number of roads.
Next N lines: two space separated integers, x-from and x-to values.

Output Format:
--------------
Print an integer result.


Sample Input-1:
---------------
4
1 4
-10 -3
-5 0
5 6

Sample Output-1:
----------------
3

Explanation:
------------
The pool is : [-10, -3] -> [1, 4] -> [5, 6]
or [-5, 0] -> [1, 4] -> [5, 6]


Sample Input-2:
---------------
4
-50 -20
-15 0
5 20
25 40

Sample Output-2:
----------------
4

Explanation:
------------
The pool is : [-50, -20] -> [-15, 0] -> [5, 20] -> [25, 40]


==== testcases ====
case =1
input =4
1 4
-10 -3
-5 0
5 6
output =3

case =2
input =4
-50 -20
-15 0
5 20
25 40
output =4

case =3
input =10
-500 450
200 250
-350 -150
125 175
150 200
100 150
50 90
-100 -10
275 350
375 475
output =7

case =4
input =10
-500 450
200 275
-350 -150
125 175
150 200
100 150
50 90
-100 -10
275 350
350 475
output =6

case =5
input =15
-500 -450
-400 -200
-350 -250
200 275
-240 -150
125 175
150 200
135 185
-175 -50
-100 0
100 150
50 90
-150 -10
275 350
350 475
output =8

case =6
input =15
-500 450
-450 300
200 275
-300 200
-200 150
125 175
150 200
-150 50
0 50
-100 200
-50 100
-275 350
350 475
-475 500
-400 450
output =4


*/
import java.util.*;
class Solution {
    public int findLongestChain(int[][] pairs) {
        Arrays.sort(pairs, (a, b) -> a[1] - b[1]);
        int cur = Integer.MIN_VALUE, ans = 0;
        for (int[] pair: pairs) if (cur < pair[0]) {
            cur = pair[1];
            ans++;
        }
        return ans;
    }
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
		int[][] grid=new int[n][2];
		for(int i=0;i<n;i++)
		for(int j=0;j<2;j++)
			grid[i][j]=sc.nextInt();
		System.out.println(new Solution().findLongestChain(grid));
    }
}