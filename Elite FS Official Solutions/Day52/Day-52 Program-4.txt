/*
Problem Statement:
-----------------
There are P people in a Village, some of the people are relatives, 
others are not. Their relationship is transitive. 

For example, 
if A is a direct relative of B, and B is a direct relative of C, 
then A is an indirect relative of C. And we define a Relation Chain as 
a group of people who are direct or indirect relatives.

Given a P*P matrix R represents the relationship between people 
in the village. If R[i][j] = 1, then the i and j persons are direct 
relatives with each other, otherwise not. 

Your task is to find out the total number of Relation Chains 
among all the people.

Input Format:
-------------
Line-1 : An integer P, number of people
Next P lines : P space separated integers.

Output Format:
--------------
Print an integer, the total number of Relation Chains


Sample Input-1:
---------------
3
1 1 0
1 1 0
0 0 1

Sample Output-1:
----------------
2

Explanation:
------------
The 0-th and 1-st people are direct relatives, so they are in a relation chain.
The 2-nd person himself is in a relation chain. So return 2.


Sample Input-2:
---------------
3
1 1 0
1 1 1
0 1 1

Sample Output-2:
----------------
1

Explanation:
------------
The 0-th and 1-st people are direct relatives, 1-st and 2-nd people 
are direct relatives. So, the 0-th and 2-nd people are indirect relatives.
All of them in the same relative chain. So return 1.

 
Test Cases:
----------
case =1
input =3
1 1 0
1 1 0
0 0 1
output =2

case =2
input =3
1 1 0
1 1 1
0 1 1
output =1

case =3
input =4
1 1 1 0
1 1 0 0
1 0 1 0
0 0 0 1
output =2

case =4
input =5
1 0 1 1 1
0 1 1 1 0
1 1 1 0 0
1 1 0 1 0
1 0 0 0 1
output =1

case =5
input =6
1 0 0 0 0 0
0 1 0 0 0 0
0 0 1 0 0 0
0 0 0 1 0 0
0 0 0 0 1 0
0 0 0 0 0 1
output =6

case =6
input =7
1 1 0 0 0 0 0
1 1 0 0 0 0 1
0 0 1 0 1 0 1
0 0 0 0 0 0 0
0 0 1 0 0 0 0
0 0 0 0 0 1 0
0 1 1 0 0 0 0
output =3

case =7
input =6
1 1 1 1 1 1
1 1 1 1 1 1
1 1 1 1 1 1
1 1 1 1 1 1
1 1 1 1 1 1
1 1 1 1 1 1
output =1

case =8
input =8
1 1 0 0 0 0 0 0
1 1 0 0 0 0 0 0
0 0 1 1 0 0 0 0
0 0 1 1 0 0 0 0
0 0 0 0 1 1 0 0
0 0 0 0 1 1 0 0
0 0 0 0 0 0 1 1
0 0 0 0 0 0 1 1
output =4

*/

Solution:
--------
import java.util.*;

public class RelationChains {
    public void dfs(int[][] R, int[] visited, int i) {
        for (int j = 0; j < R.length; j++) {
            if (R[i][j] == 1 && visited[j] == 0) {
                visited[j] = 1;
                dfs(R, visited, j);
            }
        }
    }
    public int findChainNum(int[][] R) {
        int[] visited = new int[R.length];
        int count = 0;
        for (int i = 0; i < R.length; i++) {
            if (visited[i] == 0) {
                dfs(R, visited, i);
                count++;
            }
        }
        return count;
    }
	
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		int p=sc.nextInt();
		int r[][]=new int[p][p];
		for(int i=0;i<p;i++)
			for(int j=0;j<p;j++)
				r[i][j] = sc.nextInt();
		System.out.println(new RelationChains().findChainNum(r));
	}
}