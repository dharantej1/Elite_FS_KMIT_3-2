/*
Problem Statement:
-----------------
Mohith and Rohith are good friends, They are used to chatting very often.
Mohith is lazy to type the complete word, so he finds a way to shorten the words.
For example, if the original word is "banana", he types it as "ba2[na]".

Can you help Rohith, to find the original word from the shortened word 
he received from Mohith.

NOTE: 
- You may assume that the original word is always valid and does not 
  contain any digits. 
- No white spaces. The brackets are well-formed.

Input Format:
-------------
A String, a word given by Mohith, contains brackets [], and alphabets and digits

Output Format:
--------------
A string, the original word.


Sample Input-1:
---------------
ba2[na]

Sample Output-1:
----------------
banana


Sample Input-2:
---------------
3[3[sa]2[ri]]

Sample Output-2:
----------------
sasasaririsasasaririsasasariri

 
Test Cases:
----------
case =1
input =ba2[na]
output =banana

case =2
input =2[takita]
output =takitatakita

case =3
input =3[3[sa]2[ri]]
output =sasasaririsasasaririsasasariri

case =4
input =abc3[cd]xyz
output =abccdcdcdxyz

case =5
input =abc2[de3[fgh4[i]3[jk]]]lmn
output =abcdefghiiiijkjkjkfghiiiijkjkjkfghiiiijkjkjkdefghiiiijkjkjkfghiiiijkjkjkfghiiiijkjkjklmn

case =6
input =3[4[sa]2[rima]]
output =sasasasarimarimasasasasarimarimasasasasarimarima

case =7
input =2[2[mn]3[abc2[ijk]]xyz]printed
output =mnmnabcijkijkabcijkijkabcijkijkxyzmnmnabcijkijkabcijkijkabcijkijkxyzprinted

case =8
input =2[a1[b2[c3[d4[e5[f]]]]]]
output =abcdefffffefffffefffffefffffdefffffefffffefffffefffffdefffffefffffefffffefffffcdefffffefffffefffffefffffdefffffefffffefffffefffffdefffffefffffefffffefffffabcdefffffefffffefffffefffffdefffffefffffefffffefffffdefffffefffffefffffefffffcdefffffefffffefffffefffffdefffffefffffefffffefffffdefffffefffffefffffefffff

case =9
input =12[1[mn]3[abc]]
output =mnabcabcabcmnabcabcabcmnabcabcabcmnabcabcabcmnabcabcabcmnabcabcabcmnabcabcabcmnabcabcabcmnabcabcabcmnabcabcabcmnabcabcabcmnabcabcabc

case =10
input =11[a1[b12[c]]]
output =abccccccccccccabccccccccccccabccccccccccccabccccccccccccabccccccccccccabccccccccccccabccccccccccccabccccccccccccabccccccccccccabccccccccccccabcccccccccccc

*/

Solution:
--------

import java.util.*;

public class DecodeString {
    public static String decodeString(String s) {
        Stack<Integer> intStack = new Stack<>();
        Stack<StringBuilder> strStack = new Stack<>();
        StringBuilder cur = new StringBuilder();
        int k = 0;
        for (char ch : s.toCharArray()) {
            if (Character.isDigit(ch)) {
                k = k * 10 + ch - '0';
            } else if ( ch == '[') {
                intStack.push(k);
                strStack.push(cur);
                cur = new StringBuilder();
                k = 0;
            } else if (ch == ']') {
                StringBuilder tmp = cur;
                cur = strStack.pop();
                for (k = intStack.pop(); k > 0; --k) cur.append(tmp);
            } else cur.append(ch);
        }
        return cur.toString();
    }
	
	public static void main(String args[] ) {
		Scanner sc = new Scanner(System.in);
		String word=sc.next();
		System.out.println(decodeString(word));
	 } 
}