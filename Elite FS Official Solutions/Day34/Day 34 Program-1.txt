/*
Problem Statement:
------------------
At a night club there is a game organizing to gain maximum gold. 
Weekend Venat Rao is ready to play the game with an initial amount of X, 
initial gold is 0, and a set of coupons where coupon[i] is the amount 
in the ith coupon(0-indexed).

Weekend Venkat Rao's goal is to achieve highest gold.
He can play each coupon in one of two ways as per rules:
	- If the amount with Venkat Rao is at least the amount in coupon[i], 
	then he may play the ith coupon as head, losing coupon[i] amount 
	and gaining 1 gold.
	- If Venkat Rao's gold count is at least 1, he may play the i-th coupon 
	as tail, gaining coupon[i] amount and losing 1 gold.

Each coupon may be played at most once and in any order. 
There is no need to play all the coupons by Weekend Venkat Rao.

Your task is to find the maximum gold can be earned by Weekend Venkat Rao
after playing any number of coupons.

Input Format:
-------------
Line-1: Two integers N and X, N number of coupons, and intial amount X.
Line-2: N space separated integers, amounts on the coupons. 

Output Format:
--------------
Print an integer, maximum gold earned by Weekend Venkat Rao.


Sample Input-1:
---------------
2 75
50 100

Sample Output-1:
----------------
1

Explanation:
-------------
Play the 0 coupon (50) to head, your amount becomes 50 and gold becomes 1.
There is no need to play the 1 coupon since you cannot play it head 
to add to your gold.


Sample Input-2:
---------------
4 50
25 50 75 100

Sample Output-2:
----------------
2

Explanation:
-------------
Play the coupons in this order to get a gold of 2units:
- Play the 0 coupon (25) to head, your amount becomes 25 and gold becomes 1.
- Play the 3 coupon (100) to tail, your amount becomes 125 and gold becomes 0.
- Play the 1 coupon (50) to head, your amount becomes 75 and gold becomes 1.
- Play the 2 coupon (75) to head, your amount becomes 0 and gold becomes 2.


Test Cases:
----------

case =1
input =2 75
50 100
output =1

case =2
input =4 50
25 50 75 100
output =2

case =3
input =8 100
100 200 300 400 500 600 700 800
output =3

case =4
input =8 75
50 75 150 225 300 450 1050 375
output =4

case =5
input =20 50
1050 50 100 200 300 500 800 1200 250 350 1500 2000 5000 450 650 750 250 150 350 1250
output =13

case =6
input =20 100
1050 50 100 200 300 500 800 1200 250 350 1500 2000 2500 450 650 750 250 150 350 1250
output =11

case =7
input =40 1000
1050 800 1200 250 350 1500 2000 2500 450 650 750 250 150 350 1250 1075 75 175 220 375 575 825 1225 25 325 1525 2075 2550 475 6250 7250 2250 1150 3550 9250 1025 1175 7525 3725 5225
output =29

case =8
input =50 75
1050 50 100 200 300 500 800 1200 250 350 1500 2000 2500 450 650 750 250 150 350 1250 1075 75 175 220 375 575 825 1225 25 325 1525 2075 2550 475 6250 7250 2250 1150 3550 9250 10000 9000 8000 1000 2100 3000 15000 7525 3725 5225
output =37

*/

Solution:
---------

import java.util.*;

class BagOfTokens {
    public int bagOfTokensScore(int[] tokens, int P) {
        int i = 0;
        int j = tokens.length - 1;
        Arrays.sort(tokens);
        int n = 0;
        int r = 0;
        while (i <= j) {
            if (tokens[i] <= P) {
                n++;
                P -= tokens[i];
                r = Math.max(r, n);
                i++;
            }
            else if (n > 0) {
                n--;
                P += tokens[j];
                j--;
            }
            else break;
        }
        return r;
    }
	
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int p=sc.nextInt();
		int tokens[]=new int[n];
		for(int i=0;i<n;i++)
			tokens[i]=sc.nextInt();
		
		System.out.println(new BagOfTokens().bagOfTokensScore(tokens,p));
	}
}
