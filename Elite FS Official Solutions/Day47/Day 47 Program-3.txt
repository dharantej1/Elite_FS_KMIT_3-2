/*
Problem Statement:
------------------
Venkatadri is a maths teacher.
He is teaching matrices to his students.
He is given a matrix of size m*n, and it contains only positive numbers.
He has given a task to his students to find the special matrix, 
in the iven matrix A[m][n].
A special matrix has following property:
	- The sum of elements in each row, each column and the two diagonals are equal.
	- Every 1*1 matrix is called as a special matrix.
	- The size of the special matrix should be a square, i.e., P*P.

Your task is to help the students to find the speical matrix  with max size P.


Input Format:
-------------
Line-1: Two space separated integers M and N, size of the matrix.
Next M lines: N space separated integers m and n.

Output Format:
--------------
Print an integer, maximum size P of the special matrix.


Sample Input-1:
---------------
5 5
7 8 3 5 6
3 5 1 6 7
3 5 4 3 1
6 2 7 3 2
5 4 7 6 2

Sample Output-1:
----------------
3

Explanation:
------------
The special matrix is:
5 1 6
5 4 3
2 7 3


Sample Input-2:
---------------
4 4
7 8 3 5
3 2 1 6
3 2 3 3
6 2 3 3

Sample Output-2:
----------------
2

Explanation:
------------
The special matrix is:
3 3
3 3

Test Cases:
----------
case =1
input =8 6
10 27 13 28 5 22
11 26 12 30 4 22
8 29 33 15 19 1
21 0 25 7 35 17
18 3 28 10 32 14
34 16 2 20 6 27
13 31 5 23 9 24
24 9 31 13 5 23
output =6

case =2
input =13 13
34 26 38 50 62 74 86 98 99 111 123 14 67
12 11 23 35 47 59 71 83 95 107 119 131 71
53 60 72 84 96 108 120 121 12 24 36 48 12
11 109 110 122 13 25 37 49 61 73 85 97 87
117 26 38 50 62 74 86 98 99 111 123 14 23 
87 75 87 88 100 112 124 15 27 39 51 63 13
67 113 125 16 28 40 52 64 76 77 89 101 98
45 41 53 65 66 78 90 102 114 126 17 29 117
17 79 91 103 115 127 18 30 42 54 55 67 132
15 128 19 31 43 44 56 68 80 92 104 116 67
126 45 57 69 81 93 105 117 129 20 32 33 51
163 94 106 118 130 21 22 34 46 58 70 82 113
11 41 53 65 66 78 90 102 61 73 85 97 87 24
output =11

case =3
input =5 7
1 15 7 16 20 24 28
12 21 25 29 8 12 21
8 17 13 17 26 30 9
4 16 31 10 14 18 22
12 14 19 23 27 11 15
output =5

case =4
input =9 11
1 2 3 4 5 6 7 8 9 10 11
1 1 1 1 1 1 1 1 1 10 11
2 1 1 1 1 1 1 1 1 9 10
3 1 1 1 1 1 1 1 1 8 11
4 1 1 1 1 1 1 1 1 7 12
5 1 1 1 1 1 1 1 1 5 13
6 1 1 1 1 1 1 1 1 3 12
7 1 1 1 1 1 1 1 1 2 11
8 1 1 1 1 1 1 1 1 1 10
output =8

case =5
input =4 4
11 12 16 10
8 1 6 14
3 5 7 15
4 9 2 13
output =3

case =6
input =5 6
54 91 23 4 7 8
29 4 19 90 9 12
91 18 1 32 72 32
2 31 92 17 54 23
20 89 30 3 51 8
output =4

case =7
input =9 10
7 8 12 34 21 76 34 56 87 23
12 13 56 8 16 24 32 40 48 56
52 34 23 25 33 41 49 50 9 17
87 54 36 42 43 51 10 18 26 34
91 34 52 52 11 19 27 35 36 44
72 34 21 20 28 29 37 45 53 12
11 23 45 30 38 46 54 13 21 22
76 54 32 47 55 14 15 23 31 39
76 54 87 12 45 34 67 5 13 87
output =7

case =8
input =14 15
11 32 45 23 43 56 78 12 34 67 67 123 4 23 123
12 11 36 48 60 72 84 96 108 120 132 144 156 168 23
78 121 133 145 157 169 12 24 49 61 73 85 97 109 78
89 62 74 86 98 110 122 134 146 158 170 13 25 37 121
167 159 171 14 26 38 50 75 87 99 111 123 135 147 156
95 100 112 124 136 148 160 172 15 27 39 51 63 88 56
128 28 40 52 64 76 101 113 125 137 149 161 173 16 89
234 138 150 162 174 17 29 41 53 65 77 89 114 126 86
76 66 78 90 102 127 139 151 163 175 18 30 42 54 65
97 176 19 31 43 55 67 79 91 103 115 140 152 164 76
54 104 116 128 153 165 177 20 32 44 56 68 80 92 76
123 45 57 69 81 93 105 117 129 141 166 178 21 33 42
143 142 154 179 22 34 46 58 70 82 94 106 118 130 132
78 83 95 107 119 131 143 155 167 23 35 47 59 71 143
output =13

*/

Solution:
---------

import java.util.*;

class LargestMagicSquare {
     public int largestMagicSquare(int[][] g) {
        int R = g.length, C = g[0].length, rows[][] = new int[R][C + 1], cols[][] = new int[R + 1][C];
        for (int i = 0; i < R; i++)
            for (int j = 0; j < C; j++) {
                rows[i][j + 1] = rows[i][j] + g[i][j];//cumulative sum for each row
                cols[i + 1][j] = cols[i][j] + g[i][j];//cumulative sum for each column 
            }
        for (int side = Math.min(R, C); side > 1; side--)//start with the biggest side possible
            for (int i = 0; i <= R - side; i++)//check every square
                for (int j = 0; j <= C - side; j++)
                    if (magic(g, rows, cols, i, j, side))//checks if a square with top left [i, j] and side length is magic
                        return side;
        return 1;
    }

    boolean magic(int[][] g, int[][] rows, int[][] cols, int r, int c, int side) {
        int sum = rows[r][c + side] - rows[r][c], d1 = 0, d2 = 0;
        for (int k = 0; k < side; k++) {
            d1 += g[r + k][c + k];
            d2 += g[r + side - 1 - k][c + k];
            if (rows[r + k][c + side] - rows[r + k][c] != sum || cols[r + side][c + k] - cols[r][c + k] != sum)//check each row and column
                return false;
        }
        return d1 == sum && d2 == sum;//checks both diagonals
    }
	
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		int m=sc.nextInt();
		int n=sc.nextInt();
		int grid[][]=new int[m][n];
		for(int i=0;i<m;i++)
			for(int j=0;j<n;j++)
				grid[i][j]=sc.nextInt();
		System.out.println(new LargestMagicSquare().largestMagicSquare(grid));
	}	
}