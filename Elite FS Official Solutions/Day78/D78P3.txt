/*
Mr Lokesham is given a set of N numbers nums[].
He can find the highest sum in the given set easily.
He got and idea to append the set nums[] with itself for M-1 times.
And then find the highest sum of the contiguous subset of nums[].
The subset length can be 0, in such case the answer is 0.

For example, nums[]=[1,2,3], and m=3 means the final set nums[]=[1,2,3,1,2,3,1,2,3].

And after you get the final set nums[], Lokesham wants to find 
the highest sum possible from the final set nums[].

Your task is to help the Lokesham, to find the highest possible sum.
The sum might be very long, return "sum modulo 10^9 + 7".

Constraints:
-----------
1 <= nums[].length <= 50000
1 <= m <= 50000
-9999<= nums[i] <= 9999


Input Format:
-------------
Line-1: Two space separated integers
Line-2: N space separated integers, nums.

Output Format:
--------------
Print an integer result.


Sample Input-1:
---------------
3 4
5 -4 2

Sample Output-1:
----------------
14

Explanation:
------------
Append the set [4-1] more times
Resultant Set is : 5 -4 2 5 -4 2 5 -4 2 5 -4 2
Sum of the contiuous subset [5 -4 2 5 -4 2 5 -4 2 5] is 14.


Sample Input-2:
---------------
3 2
1 2 3

Sample Output-2:
----------------
12


Sample Input-3:
---------------
3 5
3 -2 -1

Sample Output-3:
----------------
3

=== testcases ===
case =1
input =10000 100
output =/55879864/

case =2
input =25000 45000
output =/663079031/

case =3
input =50000 40000
output =/196432248/

case =4
input =25000 25000
output =/812879339/

case =5
input =35000 2007
output =/671112252/

case =6
input =45000 5434
output =/565391909/

*/
import java.util.*;
import java.io.*;

class Solution {

	public int mAppendedMaxSum(int[] arr, int k) {
        if (arr == null || arr.length == 0) return 0;
        long maxOfEnd = arr[0] > 0 ? arr[0] : 0L, maxSoFar = maxOfEnd, sum = arr[0];
        for (int i = 1; i < Math.min(k, 2) * arr.length; i++) {
            maxOfEnd = Math.max(maxOfEnd + arr[i % arr.length], arr[i % arr.length]);
            maxSoFar = Math.max(maxOfEnd, maxSoFar);
            if (i < arr.length) sum = (sum + arr[i]);
        }
        while (sum > 0 && --k >= 2)
			maxSoFar = (maxSoFar + sum) %1000000007;
        return (int)maxSoFar;
    }    

	public static void main(String args[])  throws IOException 
    {
        Scanner scan = new Scanner(System.in);
        int n=scan.nextInt();
        int m=scan.nextInt();
        Scanner s = new Scanner(new File("input.txt"));// input file 
        int[] nums = new int[n];
        for (int i = 0; i < n; i++)
            nums[i] = s.nextInt(); 
        Solution fna=new Solution();
        result=fna.mAppendedMaxSum(nums,m); 
        System.out.println(result);
    }
}
