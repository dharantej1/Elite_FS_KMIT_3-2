/*
K friends want to buy N photo-frames. 

The shop-owner wants to maximize his number of customers and the profit he makes. 
He decides that, he'll multiply the price of each photo-frame,
by the number of frames purchased by that customer's previously and plus 1. 
The first photo-frame price is, (0+1)* original price, 
the next will be (1+1)* original price and so on.

The original prices of the photo-frames are given as an array C[], 
determine the minimum cost to purchase all N photo-frames.

For example, if there are K=3 friends that want to buy N=4, photo-frames that 
cost C=[1,2,3,4], each will buy one of the photo-frames priced [2,3,4] at 
the original price. Having each purchased 1 photo-frame, the price of 
the photo-frame-1 is c[0] , now it will cost (previous purchases+1)*c[0]. 
The total cost will be 4+3+2+2=11.

Input Format
----------------
Line-1 -> contains two space-separated integers N and K, 
	  the number of photo-frames and the number of friends.
Line-2 ->  contains N space-separated positive integers c[i], 
	  the original price of each photo-frame.

Output Format
------------------
Print the minimum cost to buy all the photo-frames.


Sample Input-1:
---------------
3 3
2 5 6

Sample Output-1:
----------------
13

Explanation:
------------
There are n=3 photo-frames with costs c=[2,5,6] and k=3 people in the group. 
If each person buys one photo-frame, the total cost of prices paid is  2+5+6=13 dollars. 


Sample Input-2:
---------------
3 2
2 5 6

Sample Output-2:
------------------
15

Explanation:
-------------
There are n=3 photo-frames with costs c=[2,5,6] and k=2 people in the group. 
We can minimize the total purchase cost like so:
	- The first person purchases 2 photo-frames in order of decreasing price; 
	  this means they buy the more expensive photo-frame (c1=5) first at price 5 dollars 
	  and the less expensive photo-frame (c0=2) second at price (1+1)*2=4 dollars.
	- The second person buys the most expensive photo-frame at price 6 dollars.
We then print the sum of these purchases, which is 5+4+6=15, as our answer.


Sample Input-3:
---------------
5 3
1 3 5 7 9

Sample Output-3:
----------------
29

Explanation:
----------------
The friends buy photo-frames for 9, 7 and 3, 5 and 1 for a cost of 
9+ 7+3*(1+1) + 5+1*(1+1) = 29.


==== testcases ====
case =1
input =5 3
1 3 5 7 9
output =29

case =2
input =3 2
2 5 6
output =15

case =3
input =3 3
2 5 6
output =13

case =4
input =6 4
8 3 9 2 5 6
output =38

case =5
input =9 3
15 14 18 19 7 9 3 8 2
output =150

case =6
input =9 6
15 14 18 19 7 9 3 8 2
output =107

case =7
input =12 5
3 4 5 6 9 8 2 7 11 10 12 1 
output =109

case =8
input =12 2
3 4 5 6 9 8 2 7 11 10 12 1
output =203

case =9
input =50 23
360764 107084 365265 129062 359818 332370 994532 660242 222241 640043 183343 904492 836888 820228 164788 860741 17701 820226 464108 573790 128339 631054 633125 821203 457936 877080 961957 240374 463154 758692 307569 261508 659880 827767 331941 330630 896392 424727 203590 224689 51074 25000 425246 897540 31405 952141 395357 365374 271794 314075
output =30688647

case =10
input =90 29

output =70406793


*/
import java.io.*;
import java.util.*;
class Solution {
public static void main(String arg[])throws IOException
    {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));


           String a=br.readLine();int l=0,sum=0,m1=1;
           StringTokenizer s1=new StringTokenizer(a);
           int n=Integer.parseInt(s1.nextToken());
           int k=Integer.parseInt(s1.nextToken());
           int a1[]=new int[n];

           String x=br.readLine();

           StringTokenizer x1=new StringTokenizer(x);

           for(int i=0;i<n;i++)
           {
               a1[i]=Integer.parseInt(x1.nextToken());

           }
           Arrays.sort(a1);
           for(int i=n-1;i>=0;i--)
           {
            
            if(l==k)
            {
                l=0;
                m1++;
            }
            l++;
            sum=sum+a1[i]*m1;
           }
		System.out.println(sum);
	}
}
