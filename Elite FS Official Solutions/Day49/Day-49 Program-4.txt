/*
Problem Statement:
-----------------
The laser show at Lumbini park started online bookings,
It is an open theater having n rows of seats, each row consist of 10 seats.
The seats are labelled from 1 to 10 numbers, as shown below.

	       Row	1 2 3	 4 5 6 7 	8 9 10
		1	_ _ _	 _ _ _ _	_ _ _
		2	_ _ _	 _ _ _ _	_ _ _
		......
		n	_ _ _	 _ _ _ _	_ _ _

You will be given n value, and a list of booked seats booked[],
i.e, booked[x]= [i,j] indicates, i-th row j-th labelled seat is booked.

If a family-group of four members have to book the seats,
with the conditions are as follows:
	- Book four adjacent seats in a single row.
	- Seats across walkway (3 and 4) or (7 and 8) are not considered to be adjacent, 
	- There is an exceptional case on which the walkway split a four members group, 
	   in to two people on each side of walkway, like [2,3 4,5] or [6,7 8,9].
	   
Find out, the maximum number of family groups can book the seats,

	   
Input Format:
-------------
Line-1: Two integers n and b, number of rows, and number of bookings.
next b lines: two integers i, j, row number and seat number.

Output Format:
--------------
Print an intger, the number of ways.


Sample Input:
---------------
3 6
1 2
1 3
1 8
2 6
3 1
3 10

Sample Output:
----------------
4

Explanation:
------------
Row     1 2 3	4 5 6 7 	8 9 10
1       _ x x	b b b b		x _ _
2       _ b b	b b x _		_ _ _
3       x b b	b b b b		b b x
		
In row-1, we can fit for 1 family-group
In row-2, we can fit for 1 family-group
In row-3, we can fit for 2 family-groups

Test Cases:
----------
case =1
input =3 6
1 2
1 3
1 8
2 6
3 1
3 10
output =4

case =2
input =2 3
2 1
1 8
2 6
output =2

case =3
input =4 4
4 3
1 4
4 6
1 7
output =4

case =4
input =5 10
1 1
1 10
2 1
2 10
3 1
3 10
4 1
4 10
5 1
5 10
output =10

case =5
input =5 10
1 1
1 9
2 7
2 1
3 1
3 2
4 1
4 6
5 3
5 8
output =5

case =6
input =6 8
1 5
2 9
3 10
4 6
5 1
5 10
6 6
6 9
output =8

case =7
input =8 8
1 10
2 6
3 5
4 1
5 2
6 6
7 3
8 7
output =10

case =8
input =10 7
1 5
3 6
4 8
4 5
7 3
8 4
9 5
output =13

*/

Solution:
--------
class Theater{

	public int maxNumberOfFamilies(int n, int[][] reservedSeats) {
		Map<Integer, Integer> states = new HashMap<>();
		for (int[] seat : reservedSeats) {
		  states.put(seat[0],  states.getOrDefault(seat[0], 0) | 1 << (10 - seat[1]));
		}
		int max = (n - states.size()) * 2;
		for (int row : states.keySet()) {
		  int state = states.get(row);
		  boolean c4 = (state & 0b0001111000) == 0;
		  boolean c2 = (state & 0b0111100000) == 0;
		  boolean c6 = (state & 0b0000011110) == 0;
		  if (c2 && c6) max += 2;
		  else if (c4 || c2 || c6) max += 1;
		}
		return max;
	}
	
	/*
	// 
	public int maxNumberOfFamilies(int n, int[][] reservedSeats) {
        int res =0;
        Map<Integer, Integer> map = new HashMap<>();
        processInput(reservedSeats, map);
        res = 2 * n - 2 * map.size();
        int[] left = {2,3,4,5}, right = {6,7,8,9}, middle = {4,5,6,7};
        for(Integer key : map.keySet()){
            int count = 0;
            count = chkWhetherFree(left , map.get(key)) +
                    chkWhetherFree(right , map.get(key));
            if(count == 0)
                count = chkWhetherFree(middle , map.get(key));
            res += count;
        }
        return res;
    }

    private int chkWhetherFree(int[] list, Integer val){
        if( (val & (1 << list[0]) + (1<< list[1]) + (1<< list[2]) + (1<< list[3])) == 0)
            return 1;
        return 0;
    }

    private void processInput(int[][] reservedSeats, Map<Integer, Integer> map){
        for (int[] reservedSeat : reservedSeats) {
            map.put(reservedSeat[0], map.getOrDefault(reservedSeat[0], 0) | 1 << reservedSeat[1]);
        }
    }
	*/
	
	public static void main(String args[] )  {
    	Scanner sc = new Scanner(System.in);
		int n=sc.nextInt();
		int r=sc.nextInt();
		int reserved[][]=new int[r][2];
		for(int i=0;i<n;i++){
			reserved[i][0]=sc.nextInt();
			reserved[i][1]=sc.nextInt();
		}
		System.out.println(new Theater().maxNumberOfFamilies(n,reserved));
	}
}
