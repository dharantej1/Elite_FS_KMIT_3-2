/*
Problem Statement:
------------------
Basava interested playing with digits.
He wants create a set of integers of length N, using the digits[0-9].
The rules to create the integers are as follows:
	- digits in each integer are like d0,d1,d2...dn-1
	- and |d0-d1| = |d1-d2| = |d2-d3| ... |dn-2 - dn-1|= D

Basava is given two integers N and D, where N is length of the integer and 
D is the difference. Can you help Basava, to create such list of integers 
and print all the possible integers in ascending order


Note:
-----
Integers with leading 0's are not allowed


Input Format:
-------------
Two space separated integers N and K.

Output Format:
--------------
Print all the possible integers in ascending order.


Sample Input-1:
---------------
3 6

Sample Output-1:
----------------
[171, 282, 393, 606, 717, 828, 939]


Sample Input-2:
---------------
2 3

Sample Output-2:
----------------
[14, 25, 30, 36, 41, 47, 52, 58, 63, 69, 74, 85, 96]



Test Cases:
----------
case =1
input =2 3
output =[14, 25, 30, 36, 41, 47, 52, 58, 63, 69, 74, 85, 96]

case =2
input =3 6
output =[171, 282, 393, 606, 717, 828, 939]

case =3
input =4 6
output =[1717, 2828, 3939, 6060, 7171, 8282, 9393]

case =4
input =5 4
output =[15151, 15159, 15951, 15959, 26262, 37373, 40404, 40484, 48404, 48484, 51515, 51595, 59515, 59595, 62626, 73737, 84040, 84048, 84840, 84848, 95151, 95159, 95951, 95959]

case =5
input =5 7
output =[18181, 29292, 70707, 81818, 92929]

case =6
input =2 0
output =[11, 22, 33, 44, 55, 66, 77, 88, 99]

case =7
input =7 5
output =[1616161, 2727272, 3838383, 4949494, 5050505, 6161616, 7272727, 8383838, 9494949]

case =8
input =8 4
output =[15151515, 15151595, 15159515, 15159595, 15951515, 15951595, 15959515, 15959595, 26262626, 37373737, 40404040, 40404048, 40404840, 40404848, 40484040, 40484048, 40484840, 40484848, 48404040, 48404048, 48404840, 48404848, 48484040, 48484048, 48484840, 48484848, 51515151, 51515159, 51515951, 51515959, 51595151, 51595159, 51595951, 51595959, 59515151, 59515159, 59515951, 59515959, 59595151, 59595159, 59595951, 59595959, 62626262, 73737373, 84040404, 84040484, 84048404, 84048484, 84840404, 84840484, 84848404, 84848484, 95151515, 95151595, 95159515, 95159595, 95951515, 95951595, 95959515, 95959595]


*/

Solution:
---------
import java.util.*;

class NumsSameConsecDiff {

    public int[] numsSameConsecDiff(int N, int K) {
        if (N == 1)
            return new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

        List<Integer> results = new ArrayList<Integer>();
        for (int num = 1; num < 10; ++num)
            this.DFS(N - 1, num, K, results);

        // convert the ArrayList to int[]
        return results.stream().mapToInt(i->i).toArray();
    }

    protected void DFS(int N, int num, int K, List<Integer> results) {
        if (N == 0) {
            results.add(num);
            return;
        }
        List<Integer> nextDigits = new ArrayList<>();

        Integer tailDigit = num % 10;
        nextDigits.add(tailDigit + K);
        if (K != 0)
            nextDigits.add(tailDigit - K);
        for (Integer nextDigit : nextDigits) {
            if (0 <= nextDigit && nextDigit < 10) {
                Integer newNum = num * 10 + nextDigit;
                this.DFS(N - 1, newNum, K, results);
            }
        }
    }
	public static void main(String args[])
	{
		Scanner sc = new Scanner(System.in);
		int N=sc.nextInt();
		int K=sc.nextInt();
		int[] result=new NumsSameConsecDiff().numsSameConsecDiff(N, K);
		Arrays.sort(result);
		System.out.println(Arrays.toString(result));
	}
}
