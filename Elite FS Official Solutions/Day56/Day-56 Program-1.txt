/*
Problem Statement:
-----------------
Motu Patlu are good riends, Motu loves to eat Samosas, 
Patlu is given N Boxes of samosas[] to Motu, where box-'a' has samosas[a].
Motu can choose two boxes having highest number of samosas each time, 
box-i and box-j, where  samosas[i] <= samosas[j].
	- If samosas[i] == samosas[j] , then eat all the samosas from both boxes;
	- If samosas[i] != samosas[j] , then eat all samosas from box-i, 
	- and from box-j eat only samosas[i] samosas, and left with 
	(samosas[j]-samosas[i]), 
	- If the box becomes empty, remove the box.
	
At the end, there is at most 1 box left. Return the number of samosas left in 
that box (or 0 if there are no boxes left.)


Input Format:
-------------
N space separated integers, number of samosas[i] in box[i]

Output Format:
--------------
Print number of the samosas left at the end.


Sample Input-1:
---------------
2 7 4 1 8 1

Sample Output-1:
----------------
1

Explanation:
------------
Boxes are numbered from 0,1,2,...,N-1.

- Motu selects, box-1 has 7 samosas and box-4 has 8 samosas eat 14 samosas, 
  boxes becomes [2,4,1,1,1]
- Motu selects, box-0 has 2 samosas and box-1 has 4 samosas eat 4 samosas, 
  boxes becomes [2,1,1,1]
- Motu selects, box-1 has 1 samosa and box-0 has 2 samosas eat 2 samosas, 
  boxes becomes [1,1,1]
- Motu selects, box-0 has 1 samosa and box-1 has 1 samosa eat 2 samosas, 
  boxes becomes [1]
Finally left with 1 box, box contains 1 samosa in it.

 
Test Cases:
----------
case =1
input =2 7 4 1 8 1
output =1

case =2
input =18 4 12 4 16 4 16 9 7 11
output =1

case =3
input =11 6 33 36 30 39 35 4 33 8 6 35 42 26 40
output =2

case =4
input =11 12 20 21 65 6 7 8 9 10
output =3

case =5
input =69 84 60 80 78 82 74 78 74 70 73 77 68 83 69 63 64 61 82
output =47

case =6
input =81 54 40 69 77 42 81 74 44 40 71 50 68 78 58 59 73 85 84
output =14

case =7
input =55 70 55 82 63 83 55 62 45 84 67 45 79 67 43 60 51 63 59 77 68 65 61 48 78
output =25

case =8
input =68 51 59 71 73 66 58 74 50 51 64 64 63 71 70 67 51 60 66 70 56 53 62 62 56
output =42


*/

Solution:
--------

import java.util.*;

class Laddus {
   public int lastBox(int[] A) {
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b)-> b - a);
        for (int a : A)
            pq.offer(a);
        while (pq.size() > 1)
            pq.offer(pq.poll() - pq.poll());
        return pq.poll();
    }
	
	public static void main(String args[] ) {

	    Scanner br = new Scanner(System.in);
		String str = br.nextLine();
		
		String[] numline = str.split(" ");
		int[] nums = Arrays.asList(numline).stream().mapToInt(Integer::parseInt).toArray();
		System.out.println(new Laddus().lastBox(nums));   
	}
}