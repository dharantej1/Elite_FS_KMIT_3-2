/*
Gunith is interested in series and sequence problems in Maths.
Gunith is given an array A of integers, he wants to find out 
a Sequence, which is long and subsequence of given array.

Subsequence AS is the list AS[i], AS[i1], AS[i2], .... AS[ik], from the array, 
where 0 <= i< i1 < i2 < ..<ik < A.length

The sequence S has to follow this rule, S[i+1] - S[i] are all the same value 
(for 0 <= i < S.length - 1 ), and Sequence S can be formed from A

Find out the Max possible length of the Longest Sequence.

Input Format:
-------------
Line-1 -> An integer N, number of array elements
Line-2 -> N space separated integers, elements of the array.

Output Format:
--------------
Print an integer as your result.


Sample Input-1:
---------------
4
2 6 10 14

Sample Output-1:
----------------
4


Sample Input-2:
---------------
7
2 5 6 8 10 11 14

Sample Output-2:
----------------
5

Explanation:
------------
The longest possible arithmetic series is 2 5 8 11 14.


==== testcases ====
case =1
input =4
2 6 10 14
output =4

case =2
input =7
2 5 6 8 10 11 14
output =5

case =3
input =10
2 5 4 7 6 9 8 10 11 12
output =6

case =4
input =20
6 8 12 14 16 18 19 21 24 27 28 29 31 33 36 38 39 40 42 44
output =5

case =5
input =20
12 15 16 18 20 21 22 24 27 28 30 32 33 34 36 39 40 42 46 52
output =11

case =6
input =25
6 9 12 15 16 18 20 22 27 28 30 32 33 34 36 38 39 40 42 44 46 50 52 56 62
output =10

case =7
input =35
14 17 18 20 21 23 25 26 27 28 29 33 37 38 39 41 43 45 46 48 49 51 53 54 55 56 57 58 61 62 63 65 68 69 75
output =14

case =8
input =40
5 7 9 11 13 14 17 18 20 21 23 25 26 27 28 29 33 37 38 39 41 43 45 46 48 49 51 53 54 55 56 57 58 61 62 63 65 68 69 75
output =17


*/
import java.util.*;

class LargestArithSeq {
	 public int longestArithSeqLength(int[] A) {
        int res = 2, n = A.length;
        HashMap<Integer, Integer>[] dp = new HashMap[n];
        for (int j = 0; j < A.length; j++) {
            dp[j] = new HashMap<>();
            for (int i = 0; i < j; i++) {
                int d = A[j] - A[i];
                dp[j].put(d, dp[i].getOrDefault(d, 1) + 1);
                res = Math.max(res, dp[j].get(d));
            }
        }
        return res;
    }
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		int N=sc.nextInt();
		int arr[]=new int[N];
		for(int i=0;i<N;i++)
				arr[i]=sc.nextInt();
		System.out.println(new LargestArithSeq().longestArithSeqLength(arr));
	}
}