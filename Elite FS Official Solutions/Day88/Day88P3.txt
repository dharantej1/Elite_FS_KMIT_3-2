/*
Gopal is given a list of integers.
Your task to is find out, the length of the longest subsequence that is a
toggle sequence.

Toggle Sequence means, the difference between the consecutive numbers
are alternate positive and negative.

For Example:
Given list of integers = 1 3 2 5 4 
the consecutive differences are [ 2, -1, 3, -1], 
the differences are alternate +ve and -ve.
So, complete list is a toggle sequence.

If the list of integers = 1 3 2 4 5,
the consecutive differences are [ 2, -1, 2, 1], not alternate +ve and -ve.
Not a toggle sequence.

Note: A sequence with fewer than two elements is a toggle sequence.

Input Format:
-------------
Space separated Integers, List

Output Format:
--------------
Print the length of the longest toggle sequence


Sample Input-1:
---------------
1 7 4 9 2 5

Sample Output-1:
----------------
6

Explanation:
------------
Given list of integers = 1 7 4 9 2 5
the consecutive differences are [ 6, -3, 5, -7, 3], 
the differences are alternate +ve and -ve.
So, complete list is a toggle sequence.

Sample Input-2:
---------------
1 5 4 3 7 9 10

Sample Output-2:
----------------
4

Explanation:
------------
Given list of integers = 1 5 4 3 7 9 10
the consecutive differences are [ 4, -1, -1, 4, 2, 1], 
the differences are alternate +ve and -ve.
So, there are more than one toggle sequences of length 4.


==== testcases ====
case =1
input =1 17 5 10 13 15 10 5 16 8
output =7

case =2
input =1 5 4 3 7 9 10
output =4

case =3
input =1 7 4 9 2 5
output =6

case =4
input =1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
output =2

case =5
input =79 62 64 1 11 29 26 63 63 22 11 86 76 80 54 75 8 89 31 78 81 80 92 91 91 56 37 24 11 26
output =21

case =6
input =52 15 85 65 23 62 12 90 37 61 93 11 70 6 21 75 47 71 2 93 27 1 28 34 55 54 51 95 45 30 64 95 1 28 14 53 4 1 59 25
output =30

case =7
input =37 4 3 18 49 52 18 100 6 94 28 99 78 9 51 19 32 31 28 96 37 100 32 28 15 6 67 83 75 79 71 52 92 74 76 91 6 88 6 22 81 40 49 27 48 45 33 48 34 22
output =36

case =8
input =639 846 38 683 903 897 824 559 846 945 215 795 668 546 397 750 373 564 52 907 974 962 254 227 262 998 535 671 171 120 376 346 757 165 833 164 283 923 442 534 230 241 276 836 786 720 636 606 13 526 462 977 395 325 740 573 933 924 968 841 480 986 712 918 365 219 135 66 807 203 693 555 218 660 515
output =51

case =9
input =355 54 111 776 60 413 35 68 324 541 895 309 253 111 44 612 357 413 173 30 597 385 162 668 908 819 819 500 144 535 482 179 944 132 283 431 496 35 56 85 920 461 451 358 942 331 557 975 631 413 790 32 579 638 573 623 463 21 153 6 656 103 505 220 551 618 539 545 360 668 164 810 224 23 171 425 881 738 489 92 611 154 946 927 174 752 311 712 612 454 436 211 427 538 872 513 599 282 104 909
output =63

case =10
input =471 938 935 908 809 449 527 586 727 391 336 510 862 169 60 575 864 858 716 377 50 5 819 605 280 978 820 134 226 805 821 514 623 616 471 297 521 30 883 795 602 936 459 579 461 625 556 815 987 596 865 769 349 867 855 549 197 431 403 892 719 327 875 432 485 815 535 227 692 205 300 302 155 721 373 854 538 92 965 554 620 209 559 590 426 875 981 375 552 130 388 441 606 562 102 715 407 757 9 934 492 716 696 709 831 672 85 96 523 9 504 462 130 123 279 152 862 229 63 986 170 898 885 280 284 99 99 868 891 504 609 124 176 973 340 166 274 754 637 588 105 620 165 564 922 298 496 914 19 528
output =100


*/

import java.util.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class ToggleSequence {
    public int toggleMaxLength(int[] nums) {
        
        if( nums.length == 0 ) return 0;
        
        int[] up = new int[nums.length];
        int[] down = new int[nums.length];
        
        up[0] = 1;
        down[0] = 1;
        
        for(int i = 1 ; i < nums.length; i++){
            if( nums[i] > nums[i-1] ){
                up[i] = down[i-1]+1;
                down[i] = down[i-1];
            }else if( nums[i] < nums[i-1]){
                down[i] = up[i-1]+1;
                up[i] = up[i-1];
            }else{
                down[i] = down[i-1];
                up[i] = up[i-1];
            }
        }
        
        return Math.max(down[nums.length-1],up[nums.length-1]);
    }
		
	public static void main(String args[] ) throws IOException {
	    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		String str = br.readLine();
		String[] sarr = str.split(" ");
		int[] nums = Arrays.asList(sarr).stream().mapToInt(Integer::parseInt).toArray();

		System.out.println(new ToggleSequence().toggleMaxLength(nums));
	}
	
}