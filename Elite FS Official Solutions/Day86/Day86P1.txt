/*
There are N pair of words, the pair of words are likely to be similiar in 
meaning, where pair[i] = [org, similar] indicates that org and similar are 
equivalent words in meaning. and you are also provided a sentence 'phrase'.

You need to transform the phrase with pairs and return all possible transformed 
phrases sorted in lexicographical order.

Input Format:
-------------
Line-1: An integer N, number of pairs.
Next N lines: two space seperated strings, the pair. 
last Line: A string S, the original phrase.

Output Format:
--------------
List of transformed phrases in lexicographcal order.


Sample Input-1:
---------------
2
happy joy
share part
i am happy to share this with you

Sample Output-1:
----------------
[i am happy to part this with you, i am happy to share this with you, 
i am joy to part this with you, i am joy to share this with you]


Sample Input-2:
---------------
3
hi hello
sweet sugary
hard tough
hi ramesh the laddu you made is so sweet and hard

Sample Output-2:
----------------
[hello ramesh the laddu you made is so sugary and hard bite, 
hello ramesh the laddu you made is so sugary and tough bite, 
hello ramesh the laddu you made is so sweet and hard bite, 
hello ramesh the laddu you made is so sweet and tough bite, 
hi ramesh the laddu you made is so sugary and hard bite, 
hi ramesh the laddu you made is so sugary and tough bite, 
hi ramesh the laddu you made is so sweet and hard bite, 
hi ramesh the laddu you made is so sweet and tough bite]



==== testcases ====
case =1
input =3
hi hello
sweet sugary
hard tough
hi ramesh the laddu you made is so sweet and hard bite
output =[hello ramesh the laddu you made is so sugary and hard bite, hello ramesh the laddu you made is so sugary and tough bite, hello ramesh the laddu you made is so sweet and hard bite, hello ramesh the laddu you made is so sweet and tough bite, hi ramesh the laddu you made is so sugary and hard bite, hi ramesh the laddu you made is so sugary and tough bite, hi ramesh the laddu you made is so sweet and hard bite, hi ramesh the laddu you made is so sweet and tough bite]

case =2
input =2
happy joy
share part
i am happy to share this with you
output =[i am happy to part this with you, i am happy to share this with you, i am joy to part this with you, i am joy to share this with you]

case =3
input =3
happy joy
sad sorrow
joy cheerful
I am happy today but was sad yesterday
output =[I am cheerful today but was sad yesterday, I am cheerful today but was sorrow yesterday, I am happy today but was sad yesterday, I am happy today but was sorrow yesterday, I am joy today but was sad yesterday, I am joy today but was sorrow yesterday]

case =4
input =5
small little
group set
concept idea
full filled
sentence verdict
a small group of words that communicates a concept but isn't a full sentence
output =[a little group of words that communicates a concept but isn't a filled sentence, a little group of words that communicates a concept but isn't a filled verdict, a little group of words that communicates a concept but isn't a full sentence, a little group of words that communicates a concept but isn't a full verdict, a little group of words that communicates a idea but isn't a filled sentence, a little group of words that communicates a idea but isn't a filled verdict, a little group of words that communicates a idea but isn't a full sentence, a little group of words that communicates a idea but isn't a full verdict, a little set of words that communicates a concept but isn't a filled sentence, a little set of words that communicates a concept but isn't a filled verdict, a little set of words that communicates a concept but isn't a full sentence, a little set of words that communicates a concept but isn't a full verdict, a little set of words that communicates a idea but isn't a filled sentence, a little set of words that communicates a idea but isn't a filled verdict, a little set of words that communicates a idea but isn't a full sentence, a little set of words that communicates a idea but isn't a full verdict, a small group of words that communicates a concept but isn't a filled sentence, a small group of words that communicates a concept but isn't a filled verdict, a small group of words that communicates a concept but isn't a full sentence, a small group of words that communicates a concept but isn't a full verdict, a small group of words that communicates a idea but isn't a filled sentence, a small group of words that communicates a idea but isn't a filled verdict, a small group of words that communicates a idea but isn't a full sentence, a small group of words that communicates a idea but isn't a full verdict, a small set of words that communicates a concept but isn't a filled sentence, a small set of words that communicates a concept but isn't a filled verdict, a small set of words that communicates a concept but isn't a full sentence, a small set of words that communicates a concept but isn't a full verdict, a small set of words that communicates a idea but isn't a filled sentence, a small set of words that communicates a idea but isn't a filled verdict, a small set of words that communicates a idea but isn't a full sentence, a small set of words that communicates a idea but isn't a full verdict]

case =5
input =4
as like
beautiful charming
seen notice 
world universe
I have never seen anyone as beautiful as you in the world
output =[I have never notice anyone as beautiful as you in the universe, I have never notice anyone as beautiful as you in the world, I have never notice anyone as beautiful like you in the universe, I have never notice anyone as beautiful like you in the world, I have never notice anyone as charming as you in the universe, I have never notice anyone as charming as you in the world, I have never notice anyone as charming like you in the universe, I have never notice anyone as charming like you in the world, I have never notice anyone like beautiful as you in the universe, I have never notice anyone like beautiful as you in the world, I have never notice anyone like beautiful like you in the universe, I have never notice anyone like beautiful like you in the world, I have never notice anyone like charming as you in the universe, I have never notice anyone like charming as you in the world, I have never notice anyone like charming like you in the universe, I have never notice anyone like charming like you in the world, I have never seen anyone as beautiful as you in the universe, I have never seen anyone as beautiful as you in the world, I have never seen anyone as beautiful like you in the universe, I have never seen anyone as beautiful like you in the world, I have never seen anyone as charming as you in the universe, I have never seen anyone as charming as you in the world, I have never seen anyone as charming like you in the universe, I have never seen anyone as charming like you in the world, I have never seen anyone like beautiful as you in the universe, I have never seen anyone like beautiful as you in the world, I have never seen anyone like beautiful like you in the universe, I have never seen anyone like beautiful like you in the world, I have never seen anyone like charming as you in the universe, I have never seen anyone like charming as you in the world, I have never seen anyone like charming like you in the universe, I have never seen anyone like charming like you in the world]


*/
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
import java.util.stream.Collectors;

public class SynonymousSentences {

	 public static List<String> generateSentences(List<List<String>> synonyms, String text) {
	        Map<String, List<String>> graph = new HashMap<>();
	        for (List<String> synonymPair : synonyms) {
	            String w1 = synonymPair.get(0), w2 = synonymPair.get(1);
	            connect(graph, w1, w2);
	            connect(graph, w2, w1);
	        }
	        // BFS
	        Set<String> ans = new TreeSet<>();
	        Queue<String> q = new LinkedList<>();
	        q.add(text);
	        while (!q.isEmpty()) {
	            String out = q.remove();
	            ans.add(out); // Add to result
	            String[] words = out.split("\\s");
	            for (int i = 0; i < words.length; i++) {
	                String word = words[i];
	                if (graph.get(word) == null) continue;
	                for (String neighbor : graph.get(word)) {
	                    words[i] = neighbor;
	                    String newText = Arrays.stream(words).collect(Collectors.joining(" "));
	                    if (!ans.contains(newText)) q.add(newText);
	                }
	            }
	        }
	        return new ArrayList<>(ans);
	    }

	    private static void connect(Map<String, List<String>> graph, String v1, String v2) {
	        if (graph.get(v1) == null) graph.put(v1, new LinkedList<>());
	        graph.get(v1).add(v2);
	    }
	    
	    public static void main(String args[] ) throws IOException {
			 BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
				int n=Integer.parseInt(br.readLine());
				List<List<String>> synonyms = new ArrayList<List<String>>();
				

			       for(int i=0; i<n; i++)
			       {
			    	   List<String> combi = new ArrayList<String>();

			          
			        	  String line=br.readLine();
			        	  String words[]=line.split(" ");
			        	   combi.add(words[0]);
			        	   combi.add(words[1]);
			   			
			          
			           synonyms.add(combi);
			         
			           
			       }
			      // System.out.println(synonyms);
			      String text =br.readLine();
			      System.out.println(generateSentences(synonyms,text));
		}

}
