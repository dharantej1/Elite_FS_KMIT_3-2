/*
Problem Statement:
-----------------
Akhila is given a string S, Where S conatins only [aeiou] letters.
A special subsequence defined as a sequence of letters derived from S
that contains all five vowels in order. It means a specail subsequence 
will have one or more a's followed by the one or more e's followed by 
one or more i's followed by one or more o's followed by one or more u's.

Your task is to help Akhila to return the length of the longest special 
subsequence in S.

Input Format:
-------------
Your code should be read input from the given attached file as a string (no line breaks)

Output Format:
--------------
An integer, the length of longest subsequence.

Sample input-1:
---------------
aeeiooua

Sample Output-1:
----------------
7

Explanation:
------------
Given S = "aeeiooua", then "aeiou" and "aeeioou" are special subsequences
but "aeio" and "aeeioua" are not


Sample input-2:
---------------
aeiaaioooaauuuaeiou

Sample Output-2:
----------------
10


 
Test Cases:
----------
case =1
input =aeuiuaaeauiauaooueuu
output =10

case =2
input =aeiaaioooaauuuaeiou
output =11

case =3
input =aeeiooua
output =7

case =4
input =ueaauoooiaueoeeieeeaooiuoeuaue
output =13

case =5
input =aauuuiaaaueoaoieuoioeuoouueouuio
output =15

case =6
input =aoiuaaeouioiuoeuieoiuiaae
output =9

case =7
input =aiuiaaoioaoiaeaieoeueueeiauueiaauuaieuuuoouoaiueue
output =20

case =8
input =auuuieauoaiaiieuiouoeiaaeuoooooeieaioiaooieaoaeeiiuiuueoauueauoueoueeaaueeu
output =27

*/

Solution:
--------
import java.util.Arrays;
import java.util.Scanner;

public class LVM {
  static final int NOT_POSSIBLE = -1000000000;
  static int longestSubsequence(String s, char[] c) {
    if (s.length() == 0 || c.length == 0) {
      return 0;
    }
    if (s.length() < c.length) {
      return NOT_POSSIBLE;
    }
    if (s.length() == c.length) {
      for (int i = 0; i < s.length(); i++) {
        if (s.charAt(i) != c[i]) {
          return NOT_POSSIBLE;
        }
      }
      return s.length();
    }
    if (s.charAt(0) < c[0]) {
      return longestSubsequence(s.substring(1), c);
    } else if (s.charAt(0) == c[0]) {
      return Math.max(Math.max((1 + longestSubsequence(s.substring(1), Arrays.copyOfRange(c, 1, c.length))),     
          (1 + longestSubsequence(s.substring(1), c))), (longestSubsequence(s.substring(1), c)));
    } else {
      return longestSubsequence(s.substring(1), c);
    }
  }
  public static void main(String[] args){
    char[] chars = { 'a', 'e', 'i', 'o', 'u' };
    Scanner sc = new Scanner(System.in);
    String s = sc.nextLine();
    System.out.println(longestSubsequence(s, chars));
  }
}