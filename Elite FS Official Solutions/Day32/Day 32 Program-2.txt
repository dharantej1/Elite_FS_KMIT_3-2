/*
Problem Statement:
------------------
In a class of N students, each student has secured different marks in 
final exams, and different levels of decency, 
The students are numbered from 0,1,2,.. N-1.

The class teacher defines, compMarks[i] = [p,q], indiactes 
Student-p secured more marks than Student-q. This information is 
provided based on valid observations only. And, decentScore[p] = d, 
indicates Student-p has decency level- d.

Your task is to find and return the result[] as follows:
	- result[p] = q, where Student-q has the least level of decency
	  [i.e., the student-q with the smallest value of decentScore[q] ]
	  among all the students who scores >= Student-p.


Input Format:
-------------
Line-1: An integer N, number of students.
Next 'N-1' lines: Two space separated integers p and q, compMarks[i] = [p, q] 
Last Line: N space separated integers, decentScore[].

Output Format:
--------------
Print N space separated integers as result


Sample Input-1:
---------------
6
1 3
2 4
3 5
0 3
3 4
4 2 6 8 3 1

Sample Output-1:
----------------
0 1 2 1 1 5

Explanation:
------------
result[3] = 1.
Student-1 has secured more marks than Student-3,
Student-0 has secured more marks than Student-3.
Among [1, 0], the only Student who has least decentScore is Student-1.

result[4] = 1.
Student-1 has secured more marks than Student-3, who secured more marks than 3.
Student-2 has secured more marks than Student-4.
Among [1,2,3], the only Student who has least decentScore is Student-1.


Test Cases:
----------
case =1
input =6
1 3
2 4
3 5
0 3
3 4
4 2 6 8 3 1
output =0 1 2 1 1 5 

case =2
input =8
1 0
2 1
3 1
3 7
4 3
5 3
6 3
3 2 5 4 6 1 7 0
output =5 5 2 5 4 5 6 7 

case =3
input =10
1 0
2 0
3 0
4 0
5 2
6 2
7 3
8 1
9 8
7 4 3 9 2 0 11 4 8 10
output =5 1 5 7 4 5 6 7 8 9 

case =4
input =15
1 0
2 0
3 2
4 2
9 4
8 3
5 1
7 5
14 8
12 7
6 5
13 6
10 1
11 10
15 20 10 5 8 11 4 12 7 9 13 2 14 17 16
output =11 11 3 3 4 6 6 7 8 9 11 11 12 13 14 

case =5
input =15
1 4
2 4
0 1
6 1
5 2
3 2
7 0
8 0 
9 6
11 6
12 6
10 5
13 5
14 3
23 19 18 10 11 20 12 14 7 13 9 3 4 6 5
output =8 11 14 14 11 13 11 7 8 9 10 11 12 13 14 

case =6
input =10
1 5
2 5
3 5
4 5
5 0
5 6
5 7
0 8
6 9
7 2 20 15 12 4 13 8 1 16
output =1 1 2 3 4 1 1 1 8 1 

case =7
input =20
19 5
19 0
18 1
18 4
17 2
16 19
16 18
16 17
17 3
5 12
5 11
0 6
0 7
1 8
8 15
4 13
2 9
3 14
3 10
35 42 97 78 47 62 30 99 77 22 65 74 32 70 34 4 95 79 72 43
output =0 1 17 3 4 19 6 0 1 9 10 19 12 4 14 15 16 17 18 19 

case =8
input =20
5 19
0 19
1 18
4 18
2 17
19 16
18 16
17 16
3 17
12 5
11 5
6 0
7 0
8 1
15 8
13 4
9 2
14 3
10 3
65 68 54 14 82 28 97 48 38 9 86 7 52 96 62 60 53 90 61 26
output =7 8 9 3 4 11 6 7 8 9 10 11 12 13 14 15 11 9 8 11 

*/

Solution:
---------

import java.util.*;
class LoudAndRich {
    ArrayList<Integer>[] graph;
    int[] answer;
    int[] quiet;

    public int[] loudAndRich(int[][] richer, int[] quiet) {
        int N = quiet.length;
        graph = new ArrayList[N];
        answer = new int[N];
        this.quiet = quiet;

        for (int node = 0; node < N; ++node)
            graph[node] = new ArrayList<Integer>();

        for (int[] edge: richer)
            graph[edge[1]].add(edge[0]);

        Arrays.fill(answer, -1);

        for (int node = 0; node < N; ++node)
            dfs(node);
        return answer;
    }

    public int dfs(int node) {
        if (answer[node] == -1) {
            answer[node] = node;
            for (int child: graph[node]) {
                int cand = dfs(child);
                if (quiet[cand] < quiet[answer[node]])
                    answer[node] = cand;
            }
        }
        return answer[node];
    }
	
	public static void main(String args[])
	{
		Scanner sc= new Scanner(System.in);
		int n=sc.nextInt();
		
		int richer[][]=new int[n-1][2];
		int quiet[]=new int[n];
		
		for(int i=0;i<n-1;i++){
			richer[i][0]=sc.nextInt();
			richer[i][1]=sc.nextInt();
		}
		for(int i=0;i<n;i++)
			quiet[i]=sc.nextInt();
		int[] result=new LoudAndRich().loudAndRich(richer,quiet);
		for(int i:result)
		System.out.print(i+" ");
	}
}