/*
Problem Statement:
------------------
Bunny is playing with binary strings. He wants to break
a binary string B into 3 parts, of length atleast '1',
when we merge the 3 parts will result the string B.

Your task is to find the count the various forms to break 
the Binary String B into 3 parts, where each part should 
contain equal number of 1's.


Input Format:
-------------
A string S.

Output Format:
--------------
Print an integer, count the various forms to break.


Sample Input-1:
---------------
01010010

Sample Output-1:
----------------
6

Explanation:
------------
There are six forms to break S into 3 parts 
where each part contain the equal number of  1's.
01 | 01 | 0010
01 | 010 | 010
01 | 0100 | 10
010 | 1 | 0010
010 | 10 | 010
010 | 100 | 10


Sample Input-2:
---------------
010010

Sample Output-2:
----------------
0


Test Cases:
----------
case =1
input =01010010
output =6

case =2
input =010010
output =0

case =3
input =100100010100110
output =12

case =4
input =111111111111111
output =1

case =5
input =010010010000001010010000010011000
output =42

case =6
input =01010100010100000010001010100100000000010010101010
output =70

case =7
input =01010100010000000100010101000000000001001010100
output =96

case =8
input =010100001000000010001001000000000000010101000000000000000000000000000000001010000100000001000100100000000000001010100000000000000000000000000000000000000000000010100001000000010001001000000000000010101
output =1518

case =9
input =000000000000000000000
output =190

case =10
input =111111111111111111111
output =1

*/

Solution:
---------
import java.util.*;

class SplitStrings {
    public int numWays(String s) {
        int ones = 0, n = s.length();
        for (int i = 0; i < n; ++i) {
            ones += s.charAt(i) - '0';
        }
        if (ones == 0) {
            return (int)((n - 2L) * (n - 1L) / 2 );
        }
        if (ones % 3 != 0) {
            return 0;
        }
        int onesInEachSplitedBlock = ones / 3;
        long waysOfFirstCut = 0, waysOfSecondCut = 0;
        for (int i = 0, count = 0; i < n; ++i) {
            count += s.charAt(i) - '0';
            if (count == onesInEachSplitedBlock) {
                ++waysOfFirstCut;
            }else if (count == 2 * onesInEachSplitedBlock) {
                ++waysOfSecondCut;
            }
        }
        return (int)(waysOfFirstCut * waysOfSecondCut);  
    }
	
	public static void main(String args[])
	{
		Scanner sc = new Scanner(System.in);
		String s=sc.next();
		System.out.println(new SplitStrings().numWays(s));
	}
}