/*
Problem Statement:
-----------------
Neeraj has a task to complete. Given a number N, he has to make reductions 
to make it to 1 with the following rules:
    1. If N is odd then add 1 to it.
    2. If N is even then divide it by 2.
    
Neeraj is given the N in binary format as a string S. Neeraj always 
successful in making N to 1. 
Your task is to help Neeraj to find the number of steps required to make N  to 1.

Input Format:
-------------
A string S, represents the binary equivalent of N.

Output Format:
--------------
Print an integer as number of steps.


Sample Input-1:
---------------
110

Sample Output-1:
----------------
4

Explanation:
-------------
step-1: N=6, even, so 6/2=3
step-2: N=3, odd,  so 3+1=4
step-3: N=4, even, so 4/2=2
step-4: N=2, even, so 2/2=1
Total steps=4


Sample Input-2:
---------------
101

Sample Output-2:
----------------
5

Explanation:
------------
step-1: N=5, odd,  so 5+1=6
step-2: N=6, even, so 6/2=3
step-3: N=3, odd,  so 3+1=4
step-4: N=4, even, so 4/2=2
step-5: N=2, even, so 2/2=1
Total steps=5

 
Test Cases:
----------
case =1
input =1101
output =6

case =2
input =10101011
output =12

case =3
input =1010100011011011111111101001100001101110001010010001100001110000101110011111011101000101100000101110
output =148

case =4
input =1010010001011101011001000001100110110010110111110100010000000011110011110001111101101010010110001100
output =150

case =5
input =1000101110110010011101010010110010111011101110011000110001110100010111111000010101010000111011011010000101100111011001111000010110011100001111001100110010000111011101101000000010110110110000000101100100010111111110010101010110010101000011011101110111
output =372

case =6
input =1101000110010010001101110000100010000111100111111001110011100011110011011010010011111111111010111100111110111110110001101011010111011010001111101001111111101101100100101101000101010100111111101111111000110111001011000001100010110010111110110010000011
output =356

case =7
input =1010010111011000000101110111110101011001001001001011100011111110101011111110010010010110000011101001011101110001110001101101111000010100010001011101110001110000100000111000000111110100101011100101101001011101100110010110011101001001010011100000010001101101101110001110110101110000001101011110110111001011101010000001011110011110000000001100101000010000001100101101010001001111001111000100001001110010
output =603

case =8
input
output =743

*/

Solution:
--------
import java.util.*;

class Solution {
	    public int numSteps(String s) {
	        int n = s.length();
	        int carry = 0;
	        int ans = 0;
	        for (int i = n - 1; i >= 1; i--) {
	            if (s.charAt(i) - '0' + carry == 1) {
	                carry = 1;
	                ans += 2;
	            } else {
	                ans += 1;
	            }
	        }
	        return ans + carry;
	    }
	
	 
    public static void main(String[] args)
    {
   	 Scanner sc=new Scanner(System.in);
      String n=sc.next();     
      System.out.println(new Solution().numSteps(n));
      }
   }

