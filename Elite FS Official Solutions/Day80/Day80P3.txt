/*
In a forest, There are N redwoord trees in a row.
You are given the heights of the trees as heights[],

You are task is to find the longest tree arrangement as follows:
	- Minimum size of the tree arrangement is 3.
	- And there exist a Tree-'i' with heights[i], where 0 < i < N-1.
		- heights[0] < heights[1] < heights[2] <...< heights[i] and
		-  heights[i] > heights[i+1] > heights[i+2] >...>heights[N-1] 

And return the length of the longest tree arrangement.
If there is no such arrangement, return 0.

Input Format:
-------------
Line-1: An integer N, number of elements.
Line-2: N space separated integers, value of the elements.

Output Format:
--------------
Print an integer result.


Sample Input-1:
---------------
8
4 2 5 7 4 2 3 6

Sample Output-1:
----------------
5

Explanation:
------------
The longest tree arrangement is : 2 5 7 4 2


Sample Input-2:
---------------
4
2 4 5 7

Sample Output-2:
----------------
0


==== testcases ====
case =1
input =8
4 2 5 7 4 2 3 6
output =5

case =2
input =4
2 4 5 7
output =0

case =3
input =15
20 76 41 53 43 71 6 24 39 81 93 46 33 71 86
output =7

case =4
input =20
64 100 40 32 33 48 12 10 72 26 92 72 40 22 14 98 54 82 35 9
output =6

case =5
input =25
15 18 50 5 12 36 45 46 8 20 23 36 41 50 42 13 45 23 45 20 17 22 50 33 38
output =8

case =6
input =30
48 10 62 16 123 150 109 69 146 131 46 20 9 19 61 50 69 112 102 89 77 65 63 52 115 130 51 85 59 8
output =9

case =7
input =40
15 13 33 76 49 55 93 37 19 46 9 20 67 35 47 42 52 29 35 45 63 88 33 23 42 54 32 7 62 20 40 10 13 2 30 13 30 68 98 45
output =7

case =8
input =75
65 123 158 140 144 41 119 190 168 98 139 9 102 113 158 68 120 26 59 25 87 31 180 54 77 130 152 180 9 178 186 43 44 134 138 144 170 184 194 142 78 68 1 109 196 54 37 192 120 99 103 147 15 120 40 114 111 58 133 120 94 12 43 142 195 95 114 119 21 98 172 34 51 94 45
output =12


*/
import java.util.*;

class LongestMountain {
    public int longestMountain(int[] A) {
        int N = A.length;
        int ans = 0, base = 0;
        while (base < N) {
            int end = base;
            // if base is a left-boundary
            if (end + 1 < N && A[end] < A[end + 1]) {
                // set end to the peak of this potential mountain
                while (end + 1 < N && A[end] < A[end + 1]) end++;

                // if end is really a peak..
                if (end + 1 < N && A[end] > A[end + 1]) {
                    // set end to the right-boundary of mountain
                    while (end + 1 < N && A[end] > A[end + 1]) end++;
                    // record candidate answer
                    ans = Math.max(ans, end - base + 1);
                }
            }

            base = Math.max(end, base + 1);
        }

        return ans;
    }
	
	public static void main(String args[])
    {
        Scanner scan = new Scanner(System.in);
        int n=scan.nextInt();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++)
			nums[i]=scan.nextInt();
		System.out.println(new LongestMountain().longestMountain(nums));
	}
}