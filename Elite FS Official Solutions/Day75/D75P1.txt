/*
In a school, there are N students in a class numbered from 1,2,3..N.
During the play time in school, drill master wants to split them into 
two teams based on their interest.

If the pair of students want to play opposite each other, drill master should 
put them in different teams, e.g. pair[i] = (A,B), it is not allowed to 
put A and B in same team.
 
You need to find out wether is it possible to put everyone into two teams or not
return true if it is possible, otherwise false.

Input Format:
----------------
Line-1 -> Two Integers, N and P, number of students N, number of pairs P.
Next P lines -> Two integers, one pair[i], where 'i' is from 0 to P-1

Output Format:
------------------
Print a boolean result.


Sample Input-1:
-------------------
5 4
1 2
1 3
2 4
3 5

Sample Output-1:
---------------------
true

Explanation: 
----------------
team1 [1,4,5], team2 [2,3]


Sample Input-2:
-------------------
5 5
1 2
2 3
3 4
4 5
1 5

Sample Output-2:
---------------------
false


=== testcases ===
case =1
input =4 3
1 2
1 3
2 4
output =true

case =2
input =5 5
1 2
2 3
3 4
4 5
1 5
output =false

case =3
input =3 3
1 2
1 3
2 3
output =false

case =4
input =10 7
1 2
1 3
1 4
2 5
6 7
8 9
6 10
output =true

case =5
input =15 11
1 15
1 9
2 14
3 13
4 10
4 11
5 13
6 7
7 8
8 9
10 11
output =false

case =6
input =15 11
1 15
2 14
3 13
4 12
5 11
6 10
7 9
1 8
6 9
5 7
2 9
output =true

case =7
input =20 15
1 2
2 3
3 20
4 17
5 16
7 8
9 11
12 14
6 15
9 13
10 18
4 19
8 18
4 11
7 14
output =true

case =8
input =15 15
1 2
2 3
3 4
4 5
6 7
7 8
8 9
9 10
11 12
12 13
13 14
14 15
5 6
10 11
1 15
output =false

*/
import java.util.*;

class Solution {

	// Graph Solution using Queue.
	public boolean possibleBipartition(int N, int[][] dislikes) {
        int[] color = new int[N + 1];
        List<List<Integer>> adj = new ArrayList<>(N + 1);
        for(int i = 0; i <= N; i++) adj.add(new ArrayList<Integer>());
        for(int[] d : dislikes) {
            adj.get(d[0]).add(d[1]);
            adj.get(d[1]).add(d[0]);
        }
        
        for(int i = 1; i <= N; i++) {
            if(color[i] == 0) {
                color[i] = 1;
                Queue<Integer> q = new LinkedList<>();
                q.add(i);
                while(!q.isEmpty()) {
                    int cur = q.poll();
                    for(int nb : adj.get(cur)) {
                        if(color[nb] == 0) {
                            color[nb] = color[cur] == 1 ? 2 : 1;
                            q.add(nb);
                        } else {
                            if(color[nb] == color[cur]) return false;
                        }
                    }
                }
            }
        }
        return true;
    }
/*
// DFS Solution
    public boolean possibleBipartition(int N, int[][] dislikes) {
        int[][] graph = new int[N][N];
        for (int[] d : dislikes) {
            graph[d[0] - 1][d[1] - 1] = 1;
            graph[d[1] - 1][d[0] - 1] = 1;
        }
        int[] group = new int[N];
        for (int i = 0; i < N; i++) {
            if (group[i] == 0 && !dfs(graph, group, i, 1)) {
                return false;
            }
        }
        return true;
    }
    private boolean dfs(int[][] graph, int[] group, int index, int g) {
        group[index] = g;
        for (int i = 0; i < graph.length; i++) {
            if (graph[index][i] == 1) {
                if (group[i] == g) {
                    return false;
                }
                if (group[i] == 0 && !dfs(graph, group, i, -g)) {
                    return false;
                }
            }
        }
        return true;
    }
*/
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int d=sc.nextInt();
		int dislikes[][]=new int[d][2];
		for(int i=0;i<d;i++){
			dislikes[i][0]=sc.nextInt();
			dislikes[i][1]=sc.nextInt();
		}
		System.out.println(new Solution().possibleBipartition(n,dislikes));
	}
}