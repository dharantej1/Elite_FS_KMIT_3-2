/*
Indus Infra Ltd purchased a land of size L * W acres, for their upcoming venture.
The land is divided into rectangular plots, using fences. They have kept some 
H horizontal fences as hfences[] and V vertical fences as vfences[] on the land,
where hfence[i] is the distance from the top of the land to the i-th horizontal
fence and, vfence[j] is the distance from the top of the land to the j-th 
vertical fence. Each 1*1 cell is one acre plot.

Mr.RGV wants to purchase the biggest plot available to build a Guest-house.
Your task is to help Mr.RGV to find the biggest plot vailable after the fences 
are setup in the venture.
NOTE: The answer can be a large number, return the modulo of 10^9 + 7.

Input Format:
-------------
Line-1: 4 space separated integers, L,W,H and V
Line-2: H space separated integers, hfence[] in the range [0, L]
Line-3: V space sepaarted integers, vfence[] in the range [0, W]

Output Format:
--------------
Print an integer result, the area of biggest plot.


Sample Input-1:
---------------
5 6 2 2
2 3
2 5

Sample Output-1:
----------------
6


Sample Input-2:
---------------
5 6 1 1
3
4

Sample Output-2:
----------------
12


=== testcases ===
case =1
input =100 200 6 9
15 35 75 55 66 90
25 55 78 96 114 167 152 179 189
output =760

case =2
input =3000 5000 25 35
235 273 308 545 700 908 966 981 1266 1280 1394 1464 1879 1939 2105 2151 2251 2266 2484 2689 2758 2879 2924 2936 2944
49 140 196 217 368 747 933 1153 1157 1274 1705 1726 1736 1868 1993 1997 2078 2208 2557 2686 2926 2973 3085 3120 3148 3260 3429 3522 3727 3808 3915 4429 4449 4798 4927
output =213310

case =3
input =30000 50000 45 75
4482 4562 5180 5310 7399 8034 8388 8658 9466 11058 11068 12394 12647 13352 14376 14650 15026 15506 16760 17888 18097 18819 18856 19117 19236 20112 21933 21977 22159 22902 23276 24202 24898 25259 25964 26602 27606 28006 28204 28424 28571 28685 29015 29685 29750
520 609 769 907 1798 3121 4633 5196 5677 5767 5973 6032 6234 7411 9854 10197 10983 11377 12206 12299 12327 12678 13084 14243 14649 15808 15934 15984 16267 16505 17274 17356 18353 19375 21274 21589 21777 22357 24363 24444 24901 25082 25332 25806 25917 26110 26568 26682 27100 27856 28612 30699 31270 31823 32523 32820 32987 34357 34590 34853 34964 35890 38226 38870 39270 39969 40932 41399 44381 44922 45853 46083 46264 49126 49565
output =13365324

case =4
input =30000 50000 45 100
763 1216 1460 1600 1731 1767 3643 4244 4390 4612 4849 5545 6861 6986 8575 8608 8827 12066 12333 12595 13475 13538 13924 16290 16358 16528 16544 17208 17661 17894 17922 18083 18206 19126 19969 23302 24018 24094 24181 24259 24808 27654 28081 29099 29437

output =7315935

case =5
input =99999 99999 50 60
665 991 1800 2300 2862 4558 7713 7976 8727 17065 18561 22876 22946 25795 26498 27919 31631 32628 36257 37635 42336 42827 42962 46216 47498 49166 53175 54496 55029 58439 58991 59425 69602 75752 75882 78137 80047 81339 83207 85724 86120 86344 87109 87612 90379 91122 91568 93988 96027 96616
603 4761 8943 10613 11397 14376 14973 15027 17959 20312 25890 27796 29005 30152 30267 31499 32250 33428 33649 35093 35103 35760 40473 40547 41037 41068 42200 42460 42667 43823 44462 49599 50250 50610 50789 50949 53487 55982 57392 58102 59637 61877 62180 67251 68087 70875 73071 74283 76237 76591 77208 77749 79786 82954 84122 87031 88406 90033 95798 96084
output =58670405

case =6
input =99999 99999 150 50

41 833 4979 5256 14445 15017 17254 19088 20678 22754 22789 23772 24802 27908 37840 39694 41024 42997 45856 51533 52444 54918 57670 59957 61765 62917 63778 69380 69948 70601 71008 71889 72027 72160 72723 74685 74702 83432 86815 87843 88291 88314 92859 93692 94244 94596 96155 96776 97008 98701
output =29507972

case =7
input =70000 40000 50 75
137 460 2640 3419 6679 6851 6950 8045 8636 10347 11450 15634 16009 16256 16598 17171 18079 19529 20656 20892 22047 22487 25150 25304 27114 28475 29630 33802 34853 37422 37981 43007 43515 47231 54405 54714 56542 56745 58376 58556 59103 59685 62250 65734 66499 67544 67901 67993 68124 68863
17 970 1164 2534 2690 3165 3424 3800 5719 6161 6445 6673 7296 7995 8433 8555 8583 8929 10402 11887 13397 13495 14951 15210 15474 15495 15636 16956 18090 18286 18379 18462 18583 18628 20135 20719 21212 21442 21523 22353 22519 23368 23486 23693 24082 24102 25222 25401 27193 27483 28876 28925 29516 29903 30060 30357 30464 31480 31757 31980 32197 32424 32584 32758 33431 34193 34731 35231 36461 37594 37668 38199 38379 38428 39921
output =13766906

case =8
input =5000 65000 30 50
49 140 196 217 368 747 933 1153 1157 1274 1705 1726 1736 1868 1993 1997 2078 2208 2557 2686 2926 2973 3085 3120 3148 3260 3429 3522 3727 3808
358 1817 2759 4061 6306 7514 8342 9191 9775 10760 14657 15006 16085 16759 17334 20560 20751 21118 21926 23745 23894 24274 24486 25108 25617 33801 35610 35792 35871 38046 39750 40868 44203 44646 44922 45500 45818 46114 47188 49863 51705 52879 53153 55268 55502 55864 57874 57947 60058 61500
output =9755328


*/
import java.util.*;

class Solution {
    // We will use long instead of int to prevent overflow
    public int maxArea(int h, int w, int[] horizontalCuts, int[] verticalCuts) {
        // Start by sorting the inputs
        Arrays.sort(horizontalCuts);
        Arrays.sort(verticalCuts);
        int n = horizontalCuts.length;
        int m = verticalCuts.length;
        
        // Consider the edges first
        long maxHeight = Math.max(horizontalCuts[0], h - horizontalCuts[n - 1]);
        for (int i = 1; i < n; i++) {
            // horizontalCuts[i] - horizontalCuts[i - 1] represents the distance between
            // two adjacent edges, and thus a possible height
            maxHeight = Math.max(maxHeight, horizontalCuts[i] - horizontalCuts[i - 1]);
        }
        
        // Consider the edges first
        long maxWidth = Math.max(verticalCuts[0], w - verticalCuts[m - 1]);
        for (int i = 1; i < m; i++){
            // verticalCuts[i] - verticalCuts[i - 1] represents the distance between
            // two adjacent edges, and thus a possible width
            maxWidth = Math.max(maxWidth, verticalCuts[i] - verticalCuts[i - 1]);
        }

        // Be careful of overflow, and don't forget the modulo!
        return (int) ((maxWidth * maxHeight) % (1e9 + 7));
    }	
	public static void main(String args[])
	{
		Scanner sc= new Scanner(System.in);
		int h=sc.nextInt();
		int w=sc.nextInt();
		int hc=sc.nextInt();
		int vc=sc.nextInt();
		int hcuts[]=new int[hc]; 
		int vcuts[]=new int[vc]; 
		for(int i=0;i<hc;i++)
			hcuts[i]=sc.nextInt();
		for(int i=0;i<vc;i++)
			vcuts[i]=sc.nextInt();
		System.out.println(new Solution().maxArea(h,w,hcuts,vcuts));
	}
}