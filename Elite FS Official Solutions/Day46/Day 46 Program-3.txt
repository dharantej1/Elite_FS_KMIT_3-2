/*
Problem Statement:
------------------
Priyanka taught a new fun time program practice for Engineering Students.
As a part of this she has given set of numbers and given set of ranges, 
and asked the students to find the sum of numbers between the given range,
S and E (S<=E), both are inclusive.

You need to find the total sum of all given range sum's, and 
print the total sum. 

NOTE: Set conatins 1000 numbers.
You have to implement the code using Callable and Future using Java.


Input Format:
-------------
Line-1: An integer N, number of ranges.
Line-2: Two integers S and E, index positions 
		where 0 <= S1 <= E < 1000

Output Format:
--------------
An integer(may be long), total sum of N ranges(s, e).


Sample Input-1:
---------------
3
12 125
10 500
175 350

Sample Output-1:
----------------
4078093

Test Cases:
----------
case =1
input =3
12 125
10 500
175 350
output =4078093

case =2
input =4
120 450
234 567
100 899
1 999
output =12657955

case =3
input =7
120 450
234 567
100 899
1 999
12 125
10 500
175 350
output =16736048

case =4
input =10
120 450
234 567
250 768
123 789
100 899
1 999
234 901
12 125
10 500
175 350
output =26227097

*/

Solution:
---------
import java.io.*; 
import java.util.*;
import java.util.concurrent.*;
import java.util.Optional;

class FindSum implements Callable<Integer> {

    private int start;
    private int end;
    private int[] numbers;

    public FindSum(int[] numbers, int start,int end) {
        this.start = start;
        this.end = end;
        this.numbers = numbers;
    }

    @Override
    public Integer call() throws Exception {

        int result = 0;

        for (int i = start; i <= end; i++) {

            result += numbers[i];  
        }

        TimeUnit.MILLISECONDS.sleep(500);
        return result;
    }
}

public class RangeSum {

    public static void main(String[] args) throws ExecutionException, InterruptedException, FileNotFoundException {

        ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(2);

         Map<Integer, Future<Integer>> rangeSumList = new HashMap<>();

        Random random = new Random();
        
        // read file input
        File file = new File("MyFile.txt");
        Scanner sc1=new Scanner(file);
        String[] list=sc1.nextLine().split(" ");
        int numbers[]=new int[list.length];

        for(int i=0;i<list.length;i++)
            numbers[i]=Integer.parseInt(list[i]);

        //read ranges
        Scanner sc = new Scanner(System.in);
        int n=sc.nextInt();
        int range[][]=new int[n][2];
        for(int i=0;i<n;i++)
        {
            range[i][0]=sc.nextInt();
            range[i][1]=sc.nextInt();

            FindSum fs = new FindSum(numbers,range[i][0],range[i][1]);

            rangeSumList.put(i, executor.submit(fs));
        }
        long result=0L;
        for (Map.Entry<Integer,Future<Integer>> entry : rangeSumList.entrySet())
            result += entry.getValue().get();
        System.out.println(result);
        executor.shutdown();
    }
}