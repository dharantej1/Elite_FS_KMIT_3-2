/*
Mr Rajendra Tapadia is given a number N as string to Mr Satyam, and ask him 
to find the number of ways to make that number N equal to zero by using 
the following steps:
    - He need to perform either '+' or '-' operation between two adjacent digits
    - You can repeat the above step to make the N value to 0.
    
For example: if N is 454522 then it's possible to perform the '+'/'-' operations 
the following way, 4+5-4-5-2+2, 4-5-4+5-2+2, 4+5-4-5+2-2 or 4-5-4+5+2-2.
A total of 4 ways.

Your task is to help Mr Satyam to find the number of ways possible to make N to 0
using the above steps. Print "invalid", if it is not possible.

Input Format:
-------------
A String, the number N.

Output Format:
--------------
Print an integer result.


Sample Input-1:
---------------
13741

Sample Output-1:
----------------
2

Explanation: 
------------
The ways are, 1+3-7+4-1 and 1-3+7-4-1.


Sample Input-2:
---------------
2351

Sample Output-2:
----------------
invalid


==== testcases ====
case =1
input =13741
output =2

case =2
input =454522
output =4

case =3
input =2351
output =invalid

case =4
input =23537864772646
output =319

case =5
input =24898951
output =6

case =6
input =2489895872640921
output =1040

case =7
input =2489395877268521
output =1060

case =8
input =99999999999999
output =1716


*/
import java.util.*;

class Solution{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        
        String s = sc.next();
        
        HashMap<int[],Integer> memo = new HashMap<>();
        int ans = f(s,1,s.charAt(0)-'0',memo);
        
        if(ans == 0){
            System.out.println("invalid");
            return;
        }
        System.out.println(ans);
    }
    static int f(String s,int i,int val,Map<int[],Integer> memo){
        if(i==s.length()){
            if(val==0)return 1;
            return 0;
        }
        
        int state[] = new int[]{i,val};
        
        if(memo.containsKey(state)){
            return memo.get(state);
        }
        
        int res = f(s,i+1,val+s.charAt(i)-'0',memo) + f(s,i+1,val-s.charAt(i)+'0',memo);
        
        memo.put(state, res);
        return res;
    }
}