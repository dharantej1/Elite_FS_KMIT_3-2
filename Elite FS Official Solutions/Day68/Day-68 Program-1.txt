/*
Problem Statement:
-----------------
Mr Nagireddy is working with Binary Trees.
The elements of the tree is given in the level order format.
He is given a sequence of integers as an array, seq[].

You will be given the root of the binary tree.
Your task is to help Nagireddy to find the seq[] is a valid path from root node
to the last node in that tree, the order of elements in seq[] shoud be followed
i.e.,Last Node means, there should be no child to the node.


Your task is to implement the class Solution:
	- public boolean isValidSequence(BinaryTreeNode root, int seq[]):
	return a boolean result.
	
NOTE: 
Please do consider the node with data '-1' as null node in the given trees.


Input Format:
-------------
Line-1: comma separated integers, level order binary tree
Line-2: comma separated integers, a sequence

Output Format:
--------------
Print a boolean value.


Sample Input-1:
---------------
0,1,0,2,0,0,-1,-1,3,0,0
0,1,2,3

Sample Output-1:
----------------
true


Sample Input-2:
---------------
0,1,2,3,4,5,6,7,8,9,10
0,1,3

Sample Output-2:
----------------
false

 
Test Cases:
----------
case =1
input =0,1,0,2,0,0,-1,-1,3,0,0
0,1,2,3
output =true

case =2
input =0,1,2,3,4,5,6,7,8,9,10
0,1,3
output =false

case =3
input =0,1,2,3,4,5,6,7,8,9,10
0,1,4,10
output =true

case =4
input =1,2,3,4,5,-1,7,8,9,10,11,-1,-1,-1,-1,16,17,18,19,20,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,33,-1,35,36
1,2,4,9,18,36
output =true

case =5
input =1,2,3,4,5,-1,7,8,9,10,11,-1,-1,-1,-1,16,17,18,19,20,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,33,-1,35,36
1,2,4,8,17
output =false

case =6
input =1,2,3,4,5,6,7,8,9,-1,-1,-1,-1,10,11
1,3,7,10
output =true

case =7
input =1,2,3,4,5,6,7,8,9,-1,-1,-1,-1,10,11
1,2,4,10
output =false

case =8
input =1,2,3,4,5,6,7,15,14,13,12,10,11,9,8,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39
1,2,5,13,20
output =true

case =9
input =1,2,3,4,5,6,7,15,14,13,12,10,11,9,8,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39
1,2,4,15,16,31
output =false

case =10
input =1,2,3,4,5,6,7,15,14,13,12,10,11,9,8,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39
1,3,6,10,26
output =false

*/

Solution:
--------
import java.util.*;

class BinaryTreeNode{
	public int data; 
	public BinaryTreeNode left, right; 
	public BinaryTreeNode(int data){
		this.data = data; 
		left = null; 
		right = null; 
	}
}


public class ValidSequence {
	static BinaryTreeNode root;
	static BinaryTreeNode temp = root;
	void insert(BinaryTreeNode temp, int key)
    {
 
        if (temp == null) {
            root = new BinaryTreeNode(key);
            return;
        }
        Queue<BinaryTreeNode> q = new LinkedList<BinaryTreeNode>();
        q.add(temp);
 
        // Do level order traversal until we find
        // an empty place.
        while (!q.isEmpty()) {
            temp = q.peek();
            q.remove();
 
            if (temp.left == null) {
                temp.left = new BinaryTreeNode(key);
                break;
            }
            else
                q.add(temp.left);
 
            if (temp.right == null) {
                temp.right = new BinaryTreeNode(key);
                break;
            }
            else
                q.add(temp.right);
        }
    }
	
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		String str[]=sc.nextLine().split(",");
		String str2[]=sc.nextLine().split(",");
		ValidSequence bt=new ValidSequence();
		root=new BinaryTreeNode(Integer.parseInt(str[0]));
		for(int i=1; i<str.length; i++)
			bt.insert(root,Integer.parseInt(str[i]));
		int arr[]=new int[str2.length];
		for(int i=0; i<str2.length; i++)
			arr[i]=Integer.parseInt(str2[i]);
		Solution sol= new Solution();
		System.out.println(sol.isValidSequence(root,arr));
	}
}


class Solution {
    public boolean isValidSequence(BinaryTreeNode root, int[] seq) {
        return helper(root,seq,0);
    }
    static boolean helper(BinaryTreeNode c,int[] seq, int i){
        if(i==seq.length-1){
            if(c.left==null && c.right==null && c.data==seq[i])return true;
            return false;
            
        }
        
        if(c==null || c.data==-1 || c.data!=seq[i]){
            return false;
        }
        return helper(c.left,seq,i+1) || helper(c.right,seq,i+1);
    }
}