/*
Crazy Mohan is the head master of a school.
He do the things differently. All the students in the school,
formed as a grid for the assembly.

Crazy Mohan asked them to stand in sorted order of thier heights diagonally, 
in order to make the assembly look more unique. The students started arranging 
themselves according to their heights.

You will be given initial order of the assembly, heights of the students.
Now it is your task to find the final state of the assembly of students and print it.

Input Format:
-------------
Line-1: Two space separated integers M and N, Size of the Grid
Next M lines: N space separated integers, heights of the students.

Output Format:
--------------
Print the rid of integers, final state of the assembly.


Sample Input-1:
---------------
3 4
2 8 5 2
10 9 10 9
1 5 8 5

Sample Output-1:
----------------
2 5 5 2
5 8 8 9
1 10 9 10


Sample Input-2:
---------------
4 6
10 9 10 7 5 9
5 4 9 9 10 10
8 8 1 9 5 2
1 2 1 5 9 9

Sample Output-2:
----------------
1 9 5 2 5 9
1 4 9 9 7 10
2 5 5 9 9 10
1 8 8 10 9 10



==== testcases ====
case =1
input =4 6
10 9 10 7 5 9
5 4 9 9 10 10
8 8 1 9 5 2
1 2 1 5 9 9
output =1 9 5 2 5 9
1 4 9 9 7 10
2 5 5 9 9 10
1 8 8 10 9 10

case =2
input =3 4
2 8 5 2
10 9 10 9
1 5 8 5
output =2 5 5 2
5 8 8 9
1 10 9 10

case =3
input =7 7
8 1 2 6 10 6 4
9 2 10 10 10 7 5
10 6 9 6 4 8 1
5 2 7 3 4 9 4
4 10 6 8 9 3 6
9 3 4 2 2 10 9
10 9 1 5 5 9 3
output =2 1 2 4 1 5 4
2 3 3 4 6 7 6
2 6 3 4 6 8 10
4 2 7 8 6 9 10
1 5 5 8 9 9 10
9 3 5 6 9 9 10
10 9 4 10 10 9 10

case =4
input =10 12
1 7 10 4 2 5 10 8 6 10 9 2
9 8 1 6 2 1 8 4 2 4 2 8
3 3 6 7 10 3 5 1 8 7 1 10
6 2 7 1 7 4 7 1 10 1 9 2
5 6 1 4 9 7 6 3 8 8 6 5
10 1 2 8 9 3 10 3 9 6 5 1
2 3 7 9 9 2 3 4 4 6 9 1
7 8 7 6 5 6 5 8 1 7 9 7
8 4 5 9 3 4 8 2 8 1 4 9
2 10 7 5 9 7 7 7 8 9 3 5
output =1 1 3 2 1 1 1 2 1 2 8 2
2 1 1 4 3 1 1 1 5 2 10 9
1 2 3 1 4 3 2 5 4 7 4 10
2 2 3 3 3 4 4 5 5 6 8 6
1 4 3 4 6 4 5 6 6 8 8 9
3 3 5 6 5 8 7 6 7 7 8 10
2 7 5 6 7 7 8 7 6 9 8 10
4 5 9 6 6 8 8 8 7 7 9 9
8 7 5 9 7 7 8 9 9 7 10 9
2 10 7 8 10 7 9 9 9 9 10 10

case =5
input =15 15
17 4 9 8 4 12 15 9 11 8 16 13 1 7 20
15 2 8 16 19 19 7 10 6 9 16 7 19 10 5
12 19 10 6 7 14 10 18 19 4 3 16 4 18 2
5 3 2 17 2 19 18 4 2 9 6 11 3 3 6
8 12 18 18 4 13 19 18 15 3 19 18 13 5 3
9 4 2 4 2 13 18 7 17 19 1 11 16 17 9
17 10 14 5 4 11 2 18 8 10 14 4 12 7 18
19 12 17 9 17 18 19 8 5 14 4 12 6 8 20
11 9 2 16 16 13 2 2 14 10 4 2 5 9 18
19 2 5 13 9 9 5 4 2 1 4 12 12 13 6
1 14 2 17 9 2 3 4 19 8 17 8 1 6 11
13 12 11 1 2 4 2 7 10 14 16 8 13 3 11
14 20 15 9 11 14 7 1 2 11 15 6 1 13 18
7 10 16 6 11 14 16 4 3 14 1 5 14 16 9
10 20 18 10 5 10 19 4 14 5 2 5 17 12 11
output =1 2 1 2 4 1 8 4 3 3 3 6 1 5 20
2 1 4 3 4 4 2 9 6 9 5 3 13 2 7
2 2 2 4 4 6 5 3 10 6 11 8 4 18 10
1 3 2 2 5 7 8 10 4 11 7 11 9 7 19
2 2 4 2 4 6 7 10 11 6 12 9 13 16 16
1 2 4 4 6 8 8 8 11 12 6 15 16 17 16
2 2 3 5 4 8 8 8 9 12 13 7 18 18 18
2 4 2 4 5 5 11 10 9 12 14 14 9 19 20
1 4 4 3 7 5 12 12 11 10 14 17 15 12 19
9 2 5 7 5 8 5 14 14 13 13 16 18 19 18
1 10 2 9 9 9 9 10 15 15 14 13 18 18 19
10 5 11 11 14 12 9 9 11 17 16 16 13 19 19
10 13 6 11 11 16 13 10 14 12 18 18 17 18 19
7 14 16 12 14 14 17 14 16 14 13 18 19 17 18
10 20 18 20 15 19 19 19 17 17 16 17 19 19 17

case =6
input =15 15
14 14 20 14 10 16 19 3 15 5 15 6 13 9 3
6 18 13 13 16 1 3 20 9 6 11 1 5 7 18
6 5 20 1 3 20 20 3 12 12 13 17 4 7 9
16 1 9 12 10 16 18 15 8 13 10 6 7 16 8
10 17 2 5 11 16 2 2 13 18 9 10 15 20 4
1 2 6 15 19 3 1 3 5 3 9 16 19 2 12
17 8 15 10 5 13 4 13 15 3 10 10 17 20 8
16 8 5 6 9 5 10 2 2 12 1 4 20 4 17
5 10 14 19 15 12 11 13 10 17 16 5 12 17 11
5 16 20 9 14 7 8 7 7 6 6 10 1 13 1
6 6 11 10 5 12 7 19 19 1 10 15 3 5 18
20 20 3 20 3 6 16 18 17 16 7 6 15 11 4
7 4 6 15 18 4 5 8 2 6 20 7 18 8 7
9 1 20 2 20 9 13 19 20 13 4 6 12 10 14
9 11 14 11 19 10 10 12 2 3 20 1 18 15 8
output =2 1 2 1 1 1 4 3 2 5 1 5 7 9 3
1 3 1 3 1 3 3 9 9 6 7 4 6 9 18
1 5 4 2 3 2 4 3 11 10 6 11 4 7 13
1 2 5 6 6 3 3 10 8 12 10 8 12 15 8
2 4 5 6 6 8 7 4 10 9 13 12 13 17 16
1 2 6 5 7 8 10 10 5 12 10 16 17 15 20
2 3 6 6 6 7 10 13 11 5 13 16 17 19 15
3 5 5 7 8 6 7 10 13 12 5 13 17 19 20
5 4 5 8 7 9 7 9 10 14 13 14 15 18 20
3 9 10 6 8 10 10 11 10 11 14 15 16 18 20
2 5 10 10 8 12 13 12 15 12 12 15 16 18 20
4 6 6 11 12 9 14 15 16 16 13 14 15 16 20
1 11 6 10 16 13 14 16 15 17 18 13 18 16 20
9 7 20 19 15 18 16 17 19 18 17 19 15 18 17
9 11 14 20 20 20 20 20 19 20 20 19 20 19 20

case =7
input =3 4
3 3 1 1
2 2 1 2
1 1 1 2
output =1 1 1 1
1 2 2 2
1 2 3 3

case =8
input =5 6
11 25 66 16 9 7
23 55 17 45 15 52
75 31 36 44 58 8
22 27 33 25 68 4
84 28 14 11 5 50
output =5 17 4 8 9 7
11 11 25 45 15 52
14 23 25 44 58 16
22 27 31 36 50 66
84 28 75 33 55 68


*/
import java.util.*;

class DiagonalSort {
    public int[][] diagonalSort(int[][] mat) {
        // sort diagonals that are starting at top row
        for (int j = 0; j < mat[0].length; j++) {
            fillMat(mat, countDiagonal(mat, 0, j), 0, j);
        }
        
        // diagonals starting at first column
        for (int i = 1; i < mat.length; i++) {
            fillMat(mat, countDiagonal(mat, i, 0), i, 0);
        }
        
        return mat;
    }
    
    private int[] countDiagonal(int[][] mat, int i, int j) {
        // since the constraint specifys mat[i][j] is between 1 and 100, we can use a bucket
        int[] count = new int[101];
        while (i < mat.length && j < mat[0].length)
            count[mat[i++][j++]] ++;
        return count;
    }
    
    private void fillMat(int[][] mat, int[] count, int i, int j) {
        // fill diagonal start with the lowest value in the bucket
        int start = 1;
        while (i < mat.length && j < mat[0].length && start < 101) {
            while (count[start] == 0)
                start ++;
            mat[i++][j++] = start;
            count[start] --;
        }
    }
		
	public static void main(String[] args) { 
		Scanner sc=new Scanner(System.in);
		int m=sc.nextInt();
		int n=sc.nextInt();
		int mat[][]=new int[m][n];
		for(int i=0;i<m;i++)
		for(int j=0;j<n;j++)
			mat[i][j]=sc.nextInt();
		
		mat=new DiagonalSort().diagonalSort(mat);
		for(int i=0;i<m;i++){
			for(int j=0;j<n;j++)
				System.out.print(mat[i][j]+" ");
			System.out.println( );
		}
	}
}