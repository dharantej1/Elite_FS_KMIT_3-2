/*
Problem Statement:
-----------------
You are given two strings 'Org' and 'Sub' where Sub is a subsequence of Org. 
You aer given a list of R indices[] (Unique indices), and you need to delete 
P letters from the given string 'Org', with the following conditions:
    - You need to delete the first P letters from strin 'Org'in the given order
      of indices[] only.
    - After deleting P letters, the string 'Sub' should be subsequence of 'Org'.
      Where, 0 <= i < P and P < R.
     
Your task is to maximixe the value of P such that 'Sub' is still a subsequence 
of 'Org' after the deletion of letters, and return P.

Input Format:
-------------
Line-1: Two space seperated strings, Original and Sub
Line-2: An integer, R, number of indices.
Line-3: R space separated integers, indices[].

Output Format:
--------------
Print an integer, the maximum value of P.


Sample Input-1:
---------------
pqrprq pr
3
3 1 0

Sample Output-1:
----------------
2

Explanation:
------------
After deleting 2 letters at indices 3 and 1, "pqrprq" becomes "prrq".
"pq" is a subsequence of "prrq".
If you delete 3 letters at indices 3, 1, and 0, "pqrprq" becomes "rrq", 
and "pq" is not a subsequence of "rrq".
Hence, the maximum P is 2.

Sample Input-2:
---------------
pqrqssss pqrs
6
3 2 1 4 5 6

Sample Output-2:
----------------
1

Explanation: 
------------
After deleting 1 letter at index 3, "pqrqssss" becomes "pqrssss".
"pqrs" is a subsequence of "pqrssss".

 
Test Cases:
----------
case =1
input =ssdbssn ss
3
1 2 3
output =3

case =2
input =lklklklklkklklklklklklkklk lkkl
12
0 2 4 6 8 11 13 15 17 19 21 24
output =10

case =3
input =abcdefghi def
6
3 0 5 8 2 7
output =0

case =4
input =abcdefabcd abcd
8
0 1 2 4 5 6 7 8
output =5

case =5
input =abcabcbabababcbabcbbabcbbcbbcbbcbabbcbc abcabcabcabc
10
31 36 24 22 17 2 5 25 28 13
output =6

case =6
input =xyzpqrstxyz xz
2
1 10
output =2

case =7
input =abcdefgpqrstabcdefg abcdefg
4
7 11 8 0
output =4

case =8
input =abcbddddd abcd
6
3 2 1 4 5 6
output =1

*/

Solution:
--------
import java.util.*;
class MaxRemovals {
    public int maximumRemovals(String s, String p, int[] removable) {
        char[] letters = s.toCharArray();
    
        int l = 0, r = removable.length;
        while (l <= r) {
    
            int mid = (l+r)/2;
    
            for (int i=0;i<mid;i++) letters[removable[i]] = '/';
            
            
            if (check(letters,p)) l = mid+1;
              else {
                for (int i=0;i<mid;i++) letters[removable[i]] = s.charAt(removable[i]);
                r = mid-1;
            }
        }
        return r;
    }
    
    public boolean check(char[] letters, String p) {
        int i1 = 0, i2 = 0;
        while (i1 < letters.length && i2 < p.length()) {
            char curr = letters[i1], curr2 = p.charAt(i2);
            if (curr != '/' && curr == curr2) i2++;
            i1++;
        }
        if (i2 == p.length()) return true;
        return false;
    }
    public static void main(String args[]){
		Scanner sc = new Scanner(System.in);
		String str1 = sc.next();
		String str2 = sc.next();
		int s = sc.nextInt();
		int arr[] = new int[s];
		for(int i=0;i<s;i++){
			arr[i] = sc.nextInt();
		}
		System.out.println(new MaxRemovals().maximumRemovals(str1,str2,arr));
    }
 }