/*
Problem Statement:
-----------------
Given a list of integers points[], the points earned or lost by N persons.

A point[a], is said to be better than a point[b],
if mod(point[a] - med) > mod(point[b] - med), where med is the median of points.
If mod(point[a] - med) == mod(point[b] - med), then point[a] is said to be 
better than point[b], if point[a] > point[b].

Median is the middle value in an ordered integer list. More formally,
if the length of the list is N, the median is the element in position 
((N - 1) / 2) in the sorted list (0-indexed).

For Example,
points[]= [7, -3, 9, 8, 1], N = 5 and the median is med = ((5 - 1) / 2) = 2. 
The element at median is points[med]= 7, as sorted list is [-3, 1, 7, 8, 9]

Your task is to return P number of better values from the points[] list.
Return the answer in sorted order.

Input Format:
-------------
Line-1: Two space seperated integers, N and P
Line-2: N space separated integers points[].

Output Format:
--------------
Print the list of integers in sorted order.


Sample Input-1:
---------------
5 2
2 3 4 5 6

Sample Output-1:
----------------
2 6

Explanation:
------------
The better 2 elements are [2, 6].
Please note that although mod(6 - 4) == mod(2 - 4) but 6 is better than 2
because 6 > 2.


Sample Input-2:
---------------
6 4
3 4 9 4 3 5

Sample Output-2:
----------------
3 3 5 9

 
Test Cases:
----------
case =1
input =10 5
1 2 3 4 5 6 7 8 9 10
output =1 2 8 9 10

case =2
input =3 2
25 47 3
output =3 47

case =3
input =15 7
12 45 8 3 74 1 6 5 3 10 34 89 76 66 4
output =1 34 45 66 74 76 89

case =4
input =5 2
66 22 77 33 88
output =22 33

case =5
input =10 4
9 5 4 3 2 1 7 6 8 15
output =1 8 9 15

case =6
input =25 8
12 45 8 3 74 1 6 5 3 10 34 89 76 66 4 1 2 3 4 5 6 7 8 9 10
output =1 1 34 45 66 74 76 89

case =7
input =50 15
12 45 8 3 74 1 6 5 3 10 34 89 76 66 4 1 2 3 4 5 6 7 8 9 10 12 45 8 3 74 1 6 5 3 10 34 89 76 66 4 1 2 3 4 5 6 7 8 9 10
output =1 1 1 34 34 45 45 66 66 74 74 76 76 89 89

case =8
input =6 2
65 89 74 12 36 48
output =12 89

*/

Solution:
--------
import java.util.*;
class Test{

	public int[] getStrongest(int[] arr, int k) {
	    Arrays.sort(arr);
	    int i = 0, j = arr.length - 1, p = 0;
	    int median = arr[(arr.length - 1) / 2];
	    int[] res = new int[k];
	    while (p < k)
		if (median - arr[i] > arr[j] - median)
		    res[p++] = arr[i++];  
		else
		    res[p++] = arr[j--];      
	    return res;
	}
	public static void main(String args[]){
		Scanner sc = new Scanner(System.in);
		int s = sc.nextInt();
		int arr[] = new int[s];
		for(int i=0;i<s;i++){
			arr[i] = sc.nextInt();
		}
		int k = sc.nextInt();
		int res[] = new Test().getStrongest(arr,k);
		Arrays.sort(res);
		for(int i=0;i<res.length;i++){
			System.out.print(res[i]+" ");
		}
	}

}