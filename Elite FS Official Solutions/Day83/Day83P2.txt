/*
Mr Shravan is given a word W, and W cosists of lowercase alphabets only. 
Mr Shravan is interested to find the substring which is smallest in length 
the which occurs only one in the word W.

Your task is to help Mr Sharavan to return the length of the smallest 
substring of W according to the above statement.

Input Format:
-------------
A String W, consists of lowercase letters.

Output Format:
--------------
An integer result.


Sample Input-1:
---------------
abbaabab

Sample Output-1:
----------------
2


Sample Input-2:
---------------
rererer

Sample Output-2:
----------------
5



==== testcases ====
case =1
input =cbccbcaccacacacacbbbacbccbbcbcaacaaabcccbbaacabbbc
output =3

case =2
input =ababaababbaabbaaabababababababbbaaabbbaaa
output =4

case =3
input =ababababba
output =2

case =4
input =radar
output =1

case =5
input =radaradaradaradaradaradar
output =19

case =6
input =mimicmimicmimicmimicmimic
output =17

case =7
input =ababbababaababbababaababbababaababbababa
output =22

case =8
input =neverevenneverevenneverevenneverevenneverevenneverevenneverevenneverevenneverevenneverevenneverevennevereven
output =92


*/
import java.util.*;

class Solution{

	// Function to find the smallest
	// substring occurring only once
	static int smallestSubstring(String a)
	{
		
		// Stores all occurrences
		ArrayList<String> a1 = new ArrayList<>();

		// Generate all the substrings
		for(int i = 0; i < a.length(); i++)
		{
			for(int j = i + 1; j <= a.length(); j++)
			{
				
				// Avoid multiple occurences
				if (i != j)
				
					// Append all substrings
					a1.add(a.substring(i, j));
			}
		}

		// Take into account
		// all the substrings
		TreeMap<String, Integer> a2 = new TreeMap<>();
		for(String s : a1)
			a2.put(s, a2.getOrDefault(s, 0) + 1);

		ArrayList<String> freshlist = new ArrayList<>();

		// Iterate over all
		// unique substrings
		for(String s : a2.keySet())
		{
			
			// If frequency is 1
			if (a2.get(s) == 1)

				// Append into fresh list
				freshlist.add(s);
		}

		// Initialize a dictionary
		TreeMap<String, Integer> dictionary = new TreeMap<>();

		for(String s : freshlist)
		{
			
			// Append the keys
			dictionary.put(s, s.length());
		}

		ArrayList<Integer> newlist = new ArrayList<>();

		// Traverse the dictionary
		for(String s : dictionary.keySet())
			newlist.add(dictionary.get(s));

		int ans = Integer.MAX_VALUE;

		for(int i : newlist)
			ans = Math.min(ans, i);

		// Return the minimum of dictionary
		return ans == Integer.MAX_VALUE ? 0 : ans;
	}

	// Driver Code
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);
		String S = sc.next();
		System.out.println(smallestSubstring(S));
	}
}
