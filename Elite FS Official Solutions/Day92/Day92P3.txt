/*
Pramod is planning to design a program, which helps to create 
the IP addresses posssible from a given string S, 
where each IP address should be valid.

It is guaranteed that S contains only digits.

Can you help pramod in designing such program, which returns all possible IP addresses.
Print the answer in lexicographic order.

NOTE:
-----

- A valid IP address consists of exactly four integers, 
each integer is between 0 and 255, separated by single dots 
and cannot have leading zeros
- IP Addresses are said to be valid if it falls in the range 
from 0.0.0.0 to 255.255.255.255

- IP addresses like [123.012.234.255 , 123.234.345.34] are invalid.

Input Format:
-------------
A string S, contains only digits [0-9].

Output Format:
--------------
Print all possible IP addresses which are valid.


Sample Input-1:
---------------
23323311123

Sample Output-1:
----------------
[233.233.11.123, 233.233.111.23]


Sample Input-2:
---------------
12345678

Sample Output-2:
----------------
[1.234.56.78, 12.34.56.78, 123.4.56.78, 123.45.6.78, 123.45.67.8]


Sample Input-3:
---------------
02550255

Sample Output-3:
----------------
[0.25.50.255, 0.255.0.255]


==== testcases ====
case =1
input =255255255255
output =[255.255.255.255]

case =2
input =112123234
output =[1.12.123.234, 1.121.23.234, 1.121.232.34, 11.2.123.234, 11.21.23.234, 11.21.232.34, 11.212.3.234, 11.212.32.34, 112.1.23.234, 112.1.232.34, 112.12.3.234, 112.12.32.34, 112.123.2.34, 112.123.23.4]

case =3
input =23323311123
output =[233.233.11.123, 233.233.111.23]

case =4
input =123456
output =[1.2.34.56, 1.23.4.56, 1.23.45.6, 1.234.5.6, 12.3.4.56, 12.3.45.6, 12.34.5.6, 123.4.5.6]

case =5
input =12345678
output =[1.234.56.78, 12.34.56.78, 123.4.56.78, 123.45.6.78, 123.45.67.8]

case =6
input =1212342232
output =[12.123.42.232, 121.23.42.232, 121.234.2.232, 121.234.22.32, 121.234.223.2]

case =7
input =101024
output =[1.0.10.24, 1.0.102.4, 10.1.0.24, 10.10.2.4, 101.0.2.4]

case =8
input =02550255
output =[0.25.50.255, 0.255.0.255]


*/
import java.util.*;

public class RestoreIpAddress {

	int n;
	  String s;
	  LinkedList<String> segments = new LinkedList<String>();
	  ArrayList<String> output = new ArrayList<String>();

	  public boolean valid(String segment) {
	    /*
	    Check if the current segment is valid :
	    1. less or equal to 255      
	    2. the first character could be '0' 
	    only if the segment is equal to '0'
	    */
	    int m = segment.length();
	    if (m > 3)
	      return false;
	    return (segment.charAt(0) != '0') ? (Integer.valueOf(segment) <= 255) : (m == 1);
	  }

	  public void update_output(int curr_pos) {
	    /*
	    Append the current list of segments 
	    to the list of solutions
	    */
	    String segment = s.substring(curr_pos + 1, n);
	    if (valid(segment)) {
	      segments.add(segment);
	      output.add(String.join(".", segments));
	      segments.removeLast();
	    }
	  }

	  public void backtrack(int prev_pos, int dots) {
	    /*
	    prev_pos : the position of the previously placed dot
	    dots : number of dots to place
	    */
	    // The current dot curr_pos could be placed 
	    // in a range from prev_pos + 1 to prev_pos + 4.
	    // The dot couldn't be placed 
	    // after the last character in the string.
	    int max_pos = Math.min(n - 1, prev_pos + 4);
	    for (int curr_pos = prev_pos + 1; curr_pos < max_pos; curr_pos++) {
	      String segment = s.substring(prev_pos + 1, curr_pos + 1);
	      if (valid(segment)) {
	        segments.add(segment);  // place dot
	        if (dots - 1 == 0)      // if all 3 dots are placed
	          update_output(curr_pos);  // add the solution to output
	        else
	          backtrack(curr_pos, dots - 1);  // continue to place dots
	        segments.removeLast();  // remove the last placed dot 
	      }
	    }
	  }

	  public List<String> restoreIpAddresses(String s) {
	    n = s.length();
	    this.s = s;
	    backtrack(-1, 3);
		Collections.sort(output);
	    return output;
	  }
	  
/*
public class RestoreIPAddress {

    public List<String> restoreIpAddresses(String s) {
        List<String> res = new ArrayList<String>();
        int len = s.length();
        for(int i = 1; i<4 && i<len-2; i++){
            for(int j = i+1; j<i+4 && j<len-1; j++){
                for(int k = j+1; k<j+4 && k<len; k++){
                    String s1 = s.substring(0,i), s2 = s.substring(i,j), s3 = s.substring(j,k), s4 = s.substring(k,len);
                    if(isValid(s1) && isValid(s2) && isValid(s3) && isValid(s4)){
                        res.add(s1+"."+s2+"."+s3+"."+s4);
                    }
                }
            }
        }
        return res;
    }
    public boolean isValid(String s){
        if(s.length()>3 || s.length()==0 || (s.charAt(0)=='0' && s.length()>1) || Integer.parseInt(s)>255)
            return false;
        return true;
    }
}
*/
	  
	  public static void main(String args[] ) {
			    Scanner sc = new Scanner(System.in);
				String str=sc.next();
				RestoreIpAddress ria=new RestoreIpAddress();
			    System.out.println(ria.restoreIpAddresses(str));
		}
}