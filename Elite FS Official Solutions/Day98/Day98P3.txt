/*
Mr Srikanth has given a task to his students.
He has given a list of N numbers, nums[], the list contains both poitive and 
negative integers. Also given two more list of integers as start[] and end[],
where start[] list contains starting indices, and end[] contains ending indices.

Now, the students task is to check and return the boolean values as a list res[],
for each 'i' between, 0<=i<N, check that the rearrangement of sublist of nums[], 
from nums[start[i]] to nums[end[i]] forms an arithmetic series or not.

NOTE: A series is said to be arithmetic, if and only if,
nums[i+1]-nums[i]==nums[1]-nums[0], for all valid 'i' value.

i.e., 1,3,5,7,9 is a valid series.
2, 3, 5, 8, 12 is not a valid series.


Constraints:
------------
0<= start[i]<=end[i] < nums[].length


Input Format:
-------------
Line-1: comma separated integers, nums[]
Line-2: comma separated integers, start[]
Line-3: comma separated integers, end[]

Output Format:
--------------
Print a list of boolean values of length equals to start[]/end[] list.


Sample Input-1:
---------------
2,8,4,6,10,11,12,14,20,16,18,22,24
0,1,3,6,8
3,4,5,9,12

Sample Output-1:
----------------
[true,true,false,false,true]

Explanation: 
------------
The sublist from 0 to 3 is: [2, 8, 4, 6] => [2,4,6,8] is valid
The sublist from 1 to 4 is: [8, 4, 6,10] => [4,6,8,10] is valid
The sublist from 3 to 5 is: [6, 10, 11] is invalid for any arrangement.
The sublist from 6 to 9 is: [12, 14, 20, 16] is invalid
The sublist from 8 to 12 is: [20, 16, 18, 22,24] is valid


Sample Input-2:
---------------
-8,-6,-2,-8,-4,10,15,-20,-15,-10,-5
0,1,6,4,8,7
4,4,9,7,9,10

Sample Output-2:
----------------
[false,true,false,false,true,true]



==== testcases ====
case =1
input =2,8,4,6,10,11,12,14,20,16,18,22,24
0,1,3,6,8
3,4,5,9,12
output =[true,true,false,false,true]

case =2
input =-8,-6,-2,-8,-4,10,15,-20,-15,-10,-5
0,1,6,4,8,7
4,4,9,7,9,10
output =[false,true,false,false,true,true]

case =3
input =3,6,12,15,9,9,6,3,18,9,15,12
0,4,6,8
5,5,8,11
output =[false,true,false,true]


case =4
input =2,8,4,6,10,3,9,6,15,12,21,24,18,5,10,15,20,25,35,30,40,50,45,35,55,-8,-6,-2,-8,-4,10,15,-20,-15,-10,-5
0,5,6,5,13,13,19,13,13,25,26,31,29,33,32
4,8,9,12,17,20,21,22,24,29,29,34,32,34,35
output =[true,false,true,true,true,true,true,true,false,false,true,false,false,true,true]

case =5
input =2,8,4,6,10,3,9,6,15,12,21,24,18,5,10,15,20,25,35,30,40,50,45,35,55
0,5,6,5,13,13,19,13,13
4,8,9,12,17,20,21,22,24
output =



*/
import java.util.*;

class Solution {
    public List<Boolean> checkArithmeticSubarrays(int[] nums, int[] l, int[] r) {
        List<Boolean> res = new ArrayList<Boolean>();
        for(int i = 0; i < l.length; i++) {
            res.add(isArithmeticSeq(nums, l[i], r[i]));
        }
        
        return res;
    }
    
    private boolean isArithmeticSeq(int[] nums, int start, int end) {
        if(end - start < 2) return true;
        
        int min=Integer.MAX_VALUE, max=Integer.MIN_VALUE;
        Set<Integer> set = new HashSet<Integer>();
        for(int i = start; i <= end; i++) {
            min = Math.min(min, nums[i]);
            max = Math.max(max, nums[i]);
            set.add(nums[i]);
        }
        
        if((max - min) % (end - start) != 0) return false;
        int interval = (max - min) / (end -start);
        
        for(int i = 1; i <= end -start; i++) {
            if(!set.contains(min + i * interval)) return false;
        }
        
        return true;
    }
    
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        String sarr[]=sc.nextLine().split(",");
        String sarr1[]=sc.nextLine().split(",");
        String sarr2[]=sc.nextLine().split(",");
        int arr[]=new int[sarr.length];
        int l[]=new int[sarr1.length];
        int r[]=new int[sarr2.length];
        for(int i=0;i<sarr.length;i++){
            arr[i]=Integer.parseInt(sarr[i]);
        }
        for(int i=0;i<sarr1.length;i++){
            l[i]=Integer.parseInt(sarr1[i]);
        }
        for(int i=0;i<sarr2.length;i++){
            r[i]=Integer.parseInt(sarr2[i]);
        }
        System.out.println(new Solution().checkArithmeticSubarrays(arr,l,r));
    }
}