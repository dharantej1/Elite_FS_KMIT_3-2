/*
Mr. Dhanush has provided the string NUM, which solely contains digits.
He is looking for substrings that are numbers and have an equal number of 
distinct digits in each of them. It follows the rule if the number is 123123, 
but not if the number is 12312.

Your task is to assist Mr. Dhanush in determining the number of distinct 
substrings (numbers) of NUM that adhere to the mentioned rule.


Input Format:
-------------
A string NUM, consist of diits [0-9]

Output Format:
--------------
Print an integer result.


Sample Input-1:
---------------
6767

Sample Output-1:
----------------
5

Explanation: 
------------
The list of words are: 6,7,67,76,6767


Sample Input-2:
---------------
2345432

Sample Output-2:
----------------
16

Explnation:
-----------
The list of words are: 2,3,4,5,23,34,45,54,43,32,234,345,543,432,2345,5432




==== testcases ====
case =1
input =8792044217
output =29

case =2
input =56334505482682967109316276348403515909975515094466
output =134

case =3
input =5104580717051748407161498646951310587042809936204167512334394815999388580778393747804672166173909027
output =257

case =4
input =48164361119557620313543775768272796167968352836482464612660399203242294436299895338208235568632097066359045792100059868726732872889370204862779775925656413996110471212937614354363587487329424213589156
output =410

case =5
input =7078642706441563011664409360257199493948914300565015478400367326185575605424690966474854363213324915203325911480952698364077126771366580180413459324833045244316351433931318018249747598042631389107764434630654232297811688442899554174476950493482891931105438063399121500365198945530627035378956028979166516722082774272828016279013529808232697538916099390552653075001880749624599704458324737146626442093
output =787

case =6
input =409087236915618255611036655838101960561949702013859622214967400019070618491161273025624920568717935412928691476492750974980310921811382631766209061717618753644531294821419767300113985255692967110445902680956765785015671231467518298099331868365470074291846452200585299673556969009889940372462171304119555942280481838383256276951298640710349158860828524595739292364894100561988015037038308578250806133108801728161608550456777282258329575123304489938888534823476487851211310033119799470565015587685857648982311669338965140088000437584805507697506445742987052237177384621666587878868334052236041848434453
output =1071

case =7
input =92196359334182603991527613446171966685684757223706619131573834188312272582985340347284087912941213446860568220905184559352843519851623168121080610201120068603496742703144187934364181666013077775031270707340016957815684043564547441632406123118338786282297920829767250607599572867394057641935052673112516229698309990327429113191908943830300837485567544804618009506803635538539549872854044034524319107421039439677028797858275901651312642960078216663609991129367460367498081261559711525397093919285526534857591134793326753359088859886815869484041173160611487565439471480547240397795897138083323391405407795754683631664410410889557477947298808544310735266494679549031725216054286980560935913327411641523677449193143254404041176465509527295790075893433396776996625464888381035935333162503364948594427915237
output =1260

case =8
input =8591918688807776829594101037990436452227630881151493066526403284364498094522335117795441647494792411210883672582229462319506057421678943678387453575891814103837928400721419529624811631341907039267335943539497779576849776577524618902098791118698312041287452851443648285162793524103447068623226249819996489704857864982602636992424614877216039962874484366368206384252888034681370784225982575246468565142379987073050957674160218621048847274323869415722382242728581780361194368465093999764215516665763101847703830419251276732918798181205364292299428629703622069081046471524041196836099492063257463446475841282061188360611000761644624264334865360819192864111236862225662028667138611271498037649052967730716412707298341261245178067397557670364866748938660125182385885939159700761035263657407934096163214649207499780829821850275047014620370128249653262430699715887814475610797860668490938777208324844378747211267774359155846375817534008298097532389197392679118641241091509038598849189012378349338815575259615
output =1670

case =9
input =2241545423455234335355532244153414111315114251312421454531532535214441213521214354224333512442441224522231312511111431225321234122311534211322325225125133534352552151345245514345514144221243353342112434235131544112144323131154441345214451222225532231524444222445514525415431433443155255254454232321521341231523432144254252454142522132515532341233332131234335155455424352534313445143341351521451122244135525343213445434323154345411223222124554311451515253353242443331155544554142154231142124152445354425545323212314123142142253453234224421115245143244231245352254251335132354413132425352441513155541234515511152513432134445124142531235241543515235424512322245235522314122555443342322512113424154434543345335413414424133215454312431522552321425241354142555314233433321151321124231125332142343113415332235531232434512342455442154351323443314215142243411212422121522151332451122524113234554544511154214343232455511455323543152151145512144113523422533115255354253122251155455112424141422433255555313133254
output =436

case =10
input =9012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678
output =1081


*/
import java.util.*;

class Solution{
    public int equalDigitFrequency(String s){
       Set<Integer> ss = new HashSet<>();
       for(int i = 0; i < s.length(); i++){
           int count[] = new int[10], uniq = 0, maxCount = 0, rollingHash = 0;
           for(int j = i; j < s.length(); j++){
               int digit = s.charAt(j) - '0';
               uniq += count[digit]++ == 0 ? 1 : 0;
               maxCount = Math.max(count[digit], maxCount);
               rollingHash = (rollingHash * 11 + digit + 1) % 1_000_000_007;
               if(maxCount * uniq == j - i + 1)
                   ss.add(rollingHash);
           }
       }
       return ss.size();
   }  
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        String s=sc.next();
        System.out.println(new Solution().equalDigitFrequency(s));
    }
}
