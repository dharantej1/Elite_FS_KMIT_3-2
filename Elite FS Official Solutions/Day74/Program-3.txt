/*
There are N Trees planted on flat land at various positions along X-Axis.
You are given the X-Axis poistions of the trees in ascending order.
Mr Bilahari wants to setup a water irrigation system for T trees which are 
near to point-X.

Your task is to find and return the positions of the T nearest trees to point-X.
and answer should be ascending order. To find the nearest positions of trees to 
point-X, the rule is as follows:
	- There are two trees at posistions X1 and X2, if X1 said to be nearest
	  tree to point-X, if, [ |X1 - X| < |X2 - X| ] 
	  OR [ (|X1 - X| == |X2 - X| ) and X1 < X2 ]

Input Format:
-------------
Line-1: 3 space separated integers N, T, X, number of trees, values of T and X.
Line-2: N space separated integers, posistions of the trees.

Output Format:
--------------
Print the list of the posistions of T trees near to point-X.


Sample Input-1:
---------------
6 3 7
1 4 5 7 9 10 

Sample Output-1:
----------------
[5, 7, 9]



Sample Input-2:
---------------
6 4 2
-3 -1 0 1 3 4 

Sample Output-2:
----------------
[0, 1, 3, 4]

==== testcases ====
case =1
input =10 5 -15
-43 -37 -35 -30 -19 -8 -5 -4 6 11
output =[-30, -19, -8, -5, -4]

case =2
input =10 6 -9
-30 -19 -8 -5 -4 6 11 12 17 26
output =[-19, -8, -5, -4, 6, 11]

case =3
input =10 4 -12
-50 -48 -42 -30 -13 8 12 22 31 40
output =[-30, -13, 8, 12]

case =4
input =20 7 3
-48 -47 -45 -43 -37 -35 -30 -19 -8 -5 -4 6 11 12 17 26 32 38 41 50
output =[-8, -5, -4, 6, 11, 12, 17]

case =5
input =20 7 -6
-48 -47 -45 -43 -37 -35 -30 -19 -8 -5 -4 6 11 12 17 26 32 38 41 50
output =[-19, -8, -5, -4, 6, 11, 12]

case =6
input =30 7 5
-47 -43 -39 -36 -27 -25 -22 -19 -10 -8 -7 -5 -1 1 7 9 11 25 26 39 43 53 67 70 79 84 90 92 94 98
output =[-7, -5, -1, 1, 7, 9, 11]

case =7
input =30 8 -6
-47 -43 -39 -36 -27 -25 -22 -19 -10 -8 -7 -5 -1 1 7 9 11 25 26 39 43 53 67 70 79 84 90 92 94 98
output =[-19, -10, -8, -7, -5, -1, 1, 7]

case =8
input =30 10 10
-47 -43 -39 -36 -27 -25 -22 -19 -10 -8 -7 -5 -1 1 7 9 11 25 26 39 43 53 67 70 79 84 90 92 94 98
output =[-8, -7, -5, -1, 1, 7, 9, 11, 25, 26]


*/

import java.util.*;

class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        // Initialize binary search bounds
        int left = 0;
        int right = arr.length - k;
        
        // Binary search against the criteria described
        while (left < right) {
            int mid = (left + right) / 2;
            if (x - arr[mid] > arr[mid + k] - x) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        
        // Create output in correct format
        List<Integer> result = new ArrayList<Integer>();
        for (int i = left; i < left + k; i++) {
            result.add(arr[i]);
        }
        
        return result;
    }
    public static void main(String args[]){
     Scanner sc=new Scanner(System.in);
     int n=sc.nextInt();
     int k=sc.nextInt();
     int x=sc.nextInt();
     int arr[]=new int[n];
     for(int i=0;i<n;i++)
        arr[i]=sc.nextInt();
        
    System.out.println(new Solution().findClosestElements(arr,k,x));
        
    }
}