/*

There is a large table, and a shooter kept N watermelons on it.
Each watermelon is kept one after the other in the given X-axis positions.
The length of the watermelons may vary.

The shooter has a raffle gun, and it can blast any number of watermelons 
into pieces with single shot in a straight line. After each gun shot, 
you can remove the blasted watermelons 

You will be given the positions of the watermelons on the large table melons[].
where melon[i] = [Xi, Xj], indicates the melon kept in the table between 
Xi and Xj and watermelon length is Xj-Xi, and Xi<Xj.

Your task is to find the minimum number of gun shots, 
required to blast all the watermelons into pieces.


Input Format:
-------------
Line-1: An integer N, number of watermelons.
Next N lines: Two space separated integers, Xi and Xj.

Output Format:
--------------
Print an integer result, number of gunshots required.


Sample Input-1:
---------------
5
5 8
4 10
6 11
10 14
11 16

Sample Output-1:
----------------
2


Sample Input-2:
---------------
5
1 3
5 7
8 10
6 9
11 13

Sample Output-2:
----------------
4


==== testcases ====
case =1
input =5
5 8
4 10
6 11
10 14
11 16
output =2

case =2
input =5
1 3
5 7
8 10
6 9
11 13
output =4

case =3
input =9
10 16
2 8
1 6
7 12
13 17
18 23
5 9
19 25
24 28
output =5

case =4
input =8
1 2
3 4
5 6
7 8
9 10
11 12
13 14
13 16
output =7

case =5
input =15
1 3
5 7
8 10
6 9
11 13
12 15
14 18
16 20
14 16
17 20
19 23
21 25
22 26
24 28
27 30
output =8

case =6
input =25
1 3
5 7
8 10
6 9
11 13
12 15
14 18
16 20
14 16
17 20
19 23
21 25
22 26
24 28
27 30
31 34
33 36
35 38
40 45
42 48
46 52
48 54
51 56
55 65
39 44
output =13

case =7
input =10
15 17
14 18
13 19
12 20
11 21
10 23
8 24
7 25
4 27
6 20
output =1

case =8
input =10
15 17
19 23
13 19
12 20
11 21
10 23
8 24
24 29
4 27
6 20
output =3

*/
import java.util.*;

class Solution {
    public int findMinArrowShots(int[][] points) {
        if (points.length == 0) return 0;

        // sort by x_end
        Arrays.sort(points, (o1, o2) -> {
            // We can't simply use the o1[1] - o2[1] trick, as this will cause an 
            // integer overflow for very large or small values.
            if (o1[1] == o2[1]) return 0;
            if (o1[1] < o2[1]) return -1;
            return 1;
        });

        int arrows = 1;
        int xStart, xEnd, firstEnd = points[0][1];
        for (int[] p: points) {
            xStart = p[0];
            xEnd = p[1];
            // if the current balloon starts after the end of another one,
            // one needs one more arrow
            if (firstEnd < xStart) {
                arrows++;
                firstEnd = xEnd;
            }
        }

        return arrows;
    }
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		int N=sc.nextInt();
		int mat[][]=new int[N][2];
		for(int i=0;i<N;i++)
			for(int j=0;j<2;j++)
				mat[i][j]=sc.nextInt();
		System.out.println(new Solution().findMinArrowShots(mat));
	}
}