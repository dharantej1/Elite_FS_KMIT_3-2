/*
VishnuVardan is working with Binary Trees.
He wants to find all the sub trees with following conditions:
    - A single node is also considered as a tree with no childs. 
    - If the root node value of th tree is X, then all the node values 
    in that tree should be X.

Your task is to help VishnuVardan to find the number of sub trees are there 
in the given tree with the given terms.

Your task is to implement the class Solution:
	- public int countSubtrees(BinaryTreeNode root)
	return an integer result.

NOTE: Please do consider node with value -1 as null node.


Input Format:
-------------
Space separated integers, nodes of the tree.

Output Format:
--------------
Print an integer result.


Sample Input-1:
---------------
2,1,2,1,1,2,2

Sample Output-1:
----------------
6


Sample Input-2:
---------------
1,2,3,4,5,6,7

Sample Output-2:
----------------
4

For explanation look at the hint.

==== testcases ====
case =1
input =2,1,2,1,1,2,2
output =6

case =2
input =1,2,3,4,5,6,7
output =4

case =3
input =4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
output =17

case =4
input =1,2,3,4,5,6,7,4,4,5,5,6,6,7,7
output =12

case =5
input =1,2,3,2,2,3,3,2,2,2,2,3,3,3,3,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
output =62

case =6
input =1,2,3,2,-1,-1,3,2,-1,-1,-1,-1,-1,-1,3,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3
output =8

*/

import java.util.*;

class Solution {
    int count = 0;
    boolean is_uni(BinaryTreeNode node) {

        //base case - if the node has no children this is a univalue subtree
        if ((node.left == null || node.left.data==-1 ) && (node.right == null || node.right.data==-1)) {
            // found a univalue subtree - increment
            count++;
            return true;   
        }

        boolean is_unival = true;

        // check if all of the node's children are univalue subtrees and if they have the same value
        // also recursively call is_uni for children
        if (node.left != null || node.left.data != -1) {
            is_unival = is_uni(node.left) && is_unival && node.left.data == node.data;
         }

        if (node.right != null || node.right.data!=-1) {
            is_unival = is_uni(node.right) && is_unival && node.right.data == node.data;
        }

        // return if a univalue tree exists here and increment if it does
        if (!is_unival) return false;
        count++;
        return true;
    }
    public int countSubtrees(BinaryTreeNode root) {
        if (root == null || root.data==-1) return 0;
        is_uni(root);
        return count;
    }
}


class BinaryTreeNode{
	public int data; 
	public BinaryTreeNode left, right; 
	public BinaryTreeNode(int data){
		this.data = data; 
		left = null; 
		right = null; 
	}
}

public class UnivalueTree {
	static BinaryTreeNode root;
	static BinaryTreeNode temp = root;
	void insert(BinaryTreeNode temp, int key)
    {
 
        if (temp == null) {
            root = new BinaryTreeNode(key);
            return;
        }
        Queue<BinaryTreeNode> q = new LinkedList<BinaryTreeNode>();
        q.add(temp);
 
        // Do level order traversal until we find
        // an empty place.
        while (!q.isEmpty()) {
            temp = q.peek();
            q.remove();
 
            if (temp.left == null) {
                temp.left = new BinaryTreeNode(key);
                break;
            }
            else
                q.add(temp.left);
 
            if (temp.right == null) {
                temp.right = new BinaryTreeNode(key);
                break;
            }
            else
                q.add(temp.right);
        }
    }
	
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		String str[]=sc.nextLine().split(",");
		UnivalueTree ut=new UnivalueTree();
		root=new BinaryTreeNode(Integer.parseInt(str[0]));
		for(int i=1; i<str.length; i++)
			ut.insert(root,Integer.parseInt(str[i]));
		Solution sol= new Solution();
		System.out.println(sol.countSubtrees(root));
	}
}