/*
Problem Statement:
-----------------
A binary word Bn is formed as follows:
    B[1] = "0"
    B[i+1] =  B[i] $ "1" $ reverse(complement(B[i])) for i > 1

where $ denotes the concatenation operation, reverse(complement(B)) returns 
the reversed word of complement(B), which perform 1's complement of B 
(0 changes to 1 and 1 changes to 0).

For example, the first 4 words in the above sequence are:

    B[1] = "0"
    B[2] = "011"
    B[3] = "0111001"
    B[4] = "011100110110001"

Return the Pth bit in B[N]. It is guaranteed that P is valid for the given N.

Input Format:
-------------
Line-1: Two space seperated integers represents N and P.

Output Format:
--------------
Return a bit (0 or 1).


Sample Input-1:
---------------
3 4

Sample Output-1:
----------------
1

Explanation:
------------
B[3] = "0111001" and 4th bit is 1.

Sample Input-2:
---------------
4 10

Sample Output-2:
----------------
1

Explanation:
-------------
B[4] = "011100110110001" and 10th bit is 1.

 
Test Cases:
----------
case =1
input =3 2
output =1

case =2
input =10 423
output =1

case =3
input =20 314312
output =1

case =4
input =15 1213
output =0

case =5
input =15 2342
output =0

case =6
input =18 2224
output =0

case =7
input =18 65451
output =1

case =8
input =17 103250
output =1

*/

Solution:
--------
import java.util.*;
class Solution
{
    public static void main(String args[])
    {
        int n,p;
        Scanner sc=new Scanner(System.in);
        n=sc.nextInt();
        p=sc.nextInt();
        System.out.println(solve(n,p));
    }
    public static char solve(int n,int p)
    {
        StringBuilder prev=new StringBuilder("0");
        for(int i=2;i<=n;i++)
        {
            StringBuilder temp=new StringBuilder();
            for(int j=0;j<prev.length();j++)
            {
                if(prev.charAt(j)=='0')
                    temp.append("1");
                else temp.append("0");
            }
            temp.reverse();
            prev.append("1").append(temp);
        }
        return prev.charAt(p-1);
    }
}