/*
Problem Statement:
-----------------
Keerthilal wants to try his luck in Diamonds business. 
He decides to buy and sell diamonds. 

He is given the prices of one diamond for N days by his friend.
Initially, it is assumed that he has no diamonds.

You need to help Keerthilal in making the maximum profit that is possible. 
He can sell a diamond only after he buys a diamond. 

Note: 
    - He is allowed to do any number of transactions
      but, he can buy and sell only one diamond per transaction.
    
    - He must complete one transaction before the next transaction.
    
    - After each transaction completed, there is a break day.
    i.e After he sells his diamond, he cannot buy diamond on next day.

		
Input Format:
-------------
Space separated integers, price of the diamond for N days.

Output Format:
--------------
Print an integer, maximum profit.


Sample Input-1:
---------------
7 1 5 3 6 4

Sample Output-1:
----------------
5

Explanation: 
------------
Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.


Sample Input-2:
---------------
1 2 3 1 3

Sample Output-2:
----------------
3

Explanation: 
------------
Buy on day 1 (price = 1) and sell on day 2 (price = 2), profit = 2-1 = 1.
Buy on day 4 (price = 1) and sell on day 5 (price = 3), profit = 3-1 = 2.
Total Maximum Profit = 1+2 = 3


 
Test Cases:
----------
case =1
input =23 84 61 75 21 15 57 68
output =114

case =2
input =599 299 799 499 899 999 399 699
output =900

case =3
input =1024 658 1123 498 999 652 5021
output =4834

case =4
input =321 456 987 258 654 123 741 428 357 968 412 589 742 698 398
output =2048

case =5
input =78 56 21 48 39 67 97
output =76

case =6
input =98 29 79 39 69 49 99 59
output =100

case =7
input =7 1 5 3 6 4
output =5

case =8
input =1 2 3 1 3
output =3

*/

Solution:
--------
import java.util.*;

class Solution{
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        String sarr[] = sc.nextLine().split(" ");
    
        int n = sarr.length;
        int a[] = new int[n];
        for(int i=0;i<n;i++){
            a[i] = Integer.parseInt(sarr[i]);
        }
        
        int ans = getMaxProfit(a,n);
        
        System.out.println(ans);
    }
    
    static int getMaxProfit(int a[],int n){
        int dp[][] = new int[n][3];
        
        // 0 can buy 
        // 1 can sell
        // 2 break day
        
        dp[0][0] = 0;
        dp[0][1] = -a[0];
        dp[0][2] = 0;
        
        for(int i=1;i<n;i++){
            dp[i][0] = Math.max(dp[i-1][2], dp[i-1][0]);
            dp[i][1] = Math.max(dp[i-1][0] - a[i], dp[i-1][1]);
            dp[i][2] = dp[i-1][1] + a[i];
        }
        
        return Math.max(dp[n-1][0], dp[n-1][2]);
    }
}