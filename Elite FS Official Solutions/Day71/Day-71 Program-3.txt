/*
Problem Statement:
-----------------
A set of computers connected with each other and formed a network with the 
following rule, one computer can directly connected with atmost two computers only.
Each computer is assigned with an ID, the computer ID's may be repeated.

You are given the entire network as a tree.
Your task is to transform the network into a single row of computers,
The transformin process follows the below order:
    - For transformation, use the same network tree structure.
    - The transformation should be done in the pre-order format of the tree.
    - In the network tree, the right computer points to the next computer 
      and the left computer connected to no computer.
    
Implement the class Solution:
   1. public void transform(BinaryTreeNode root) : transform the tree.

NOTE: in the input tree, consider -1 as 'No Connection'.


Input Format:
-------------
Single line of space separated integers, network ID's in the form the tree.

Output Format:
--------------
Print a string, as described in sample.


Sample Input-1:
---------------
1 2 3 4 5 6 7

Sample Output-1:
----------------
1 2 4 5 3 6 7

Explanation:
------------
Look at the hint for unerstanding

 
Test Cases:
----------
case =1
input =11 47 49 43 45 49 21 25 47 40
output =11 47 43 25 47 45 40 49 49 21

case =2
input =11 47 49 43 45 49 21 25 47 40 42 26 12 21 47 49 13 10 39 40
output =11 47 43 25 49 13 47 10 39 45 40 40 42 49 49 26 12 21 21 47

case =3
input =36 24 9 5 35 27 29 42 18 4 12 9 16 32 29 22 26 17 35 22 19 7 7 5 48 41 42 37 4 13 24 47 25 45 48 19
output =36 24 5 42 22 47 25 26 45 48 18 17 19 35 35 4 22 19 12 7 7 9 27 9 5 48 16 41 42 29 32 37 4 29 13 24

case =4
input =36 24 9 5 35 27 29 42 18 4 12 9 16 26 1 33 47 46 36 47 47 40 38 13 19 32 29 22 26 17 35 22 19 7 7 5 48 41 42 37 4 13 24 47 25 45 48 19
output =36 24 5 42 33 22 19 47 7 7 18 46 5 48 36 41 42 35 4 47 37 4 47 13 24 12 40 47 25 38 45 48 9 27 9 13 19 19 16 32 29 29 26 22 26 1 17 35

case =5
input =3 3 6 5 3 6 7 -1 -1 4 3 8 6
output =3 3 5 3 4 3 6 6 8 6 7

case =6
input =3 3 9 8 3 10 9 8 9 3 7 11 10 9 12 -1 -1 -1 -1 6 3
output =3 3 8 8 9 3 3 6 3 7 9 10 11 10 9 9 12

case =7
input =5 10 5 10 12 5 14 11 10 15 12 5 8 14 15
output =5 10 10 11 10 12 15 12 5 5 5 8 14 14 15

case =8
input =1 4 2 3 -1 -1 5 6 -1 -1 -1 -1 -1 -1 4 5 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 7
output =1 4 3 6 5 2 5 4 7

*/

Solution:
--------
import java.util.*;

class BinaryTreeNode{
	public int data; 
	public BinaryTreeNode left, right; 
	public BinaryTreeNode(int data){
		this.data = data; 
		left = null; 
		right = null; 
	}
}

public class TreeToList {
	static BinaryTreeNode root;
	static BinaryTreeNode temp = root;
	void insert(BinaryTreeNode temp, int key)
    {
 
        if (temp == null) {
            root = new BinaryTreeNode(key);
            return;
        }
        Queue<BinaryTreeNode> q = new LinkedList<BinaryTreeNode>();
        q.add(temp);
 
        // Do level order traversal until we find
        // an empty place.
        while (!q.isEmpty()) {
            temp = q.peek();
            q.remove();
 
            if (temp.left == null) {
                temp.left = new BinaryTreeNode(key);
                break;
            }
            else
                q.add(temp.left);
 
            if (temp.right == null) {
                temp.right = new BinaryTreeNode(key);
                break;
            }
            else
                q.add(temp.right);
        }
    }
	
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		String str[]=sc.nextLine().split(" ");
		TreeToList ttl=new TreeToList();
		root=new BinaryTreeNode(Integer.parseInt(str[0]));
		for(int i=1; i<str.length; i++)
			ttl.insert(root,Integer.parseInt(str[i]));
		
		Solution sol= new Solution();
		sol.transform(ttl.root);
		do{ 
			System.out.print(root.data+" ");  
			root = root.right;  
		}while(root != null); 
	}
}

class Solution {
    BinaryTreeNode res = null, p = null;
	public void transform(BinaryTreeNode root) {
        helper(root);
        root.left = null;
        root.right = res.right;
	}
	
	void helper(BinaryTreeNode c){
	    if(c == null || c.data == -1){
	        return;
	    }
	    BinaryTreeNode now = new BinaryTreeNode(c.data);
	    if(res == null){
	        res = now;
	        p = now;
	    }
	    else{
	        p.right = now;
	        p = p.right;
	    }
	    helper(c.left);
	    helper(c.right);
	    
	}
}