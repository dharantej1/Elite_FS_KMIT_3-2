/*
Problem Statement:
-----------------
AlphaCipher is a string formed from another string by rearranging its letters

You are given a string S.
Your task is to check, can any one of the AlphaCipher is a palindrome or not.

Input Format:
-------------
A string S

Output Format:
--------------
Print a boolean value.


Sample Input-1:
---------------
carrace

Sample Output-1:
----------------
true


Sample Input-2:
---------------
code

Sample Output-2:
----------------
false


Test Cases:
----------
case =1
input =carrace
output =true

case =2
input =code
output =false

case =3
input =geeksgeeks
output =true

case =4
input =leetcode
output =false

case =5
input =redismurderrum
output =false

case =6
input =redmurdersrum
output =true

case =7
input =caniseebeesinaevacave
output =true

case =8
input =evacaniseebeesincave
output =false

*/

Solution:
--------
import java.util.*;

class TargetSum {
    public int findTargetSumWays(int[] nums, int s) {
        int sum = 0;
        for (int n : nums)
            sum += n;
        return sum < s || (s + sum) % 2 > 0 ? 0 : subsetSum(nums, (s + sum) >>> 1); 
    }   

    public int subsetSum(int[] nums, int s) {
        int[] dp = new int[s + 1]; 
        dp[0] = 1;
        for (int n : nums)
            for (int i = s; i >= n; i--)
                dp[i] += dp[i - n]; 
        return dp[s];
    } 
	
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int t=sc.nextInt();
		int arr[]=new int[n];
		for(int j=0;j<n;j++)
			arr[j]=sc.nextInt();
		System.out.println(new TargetSum().findTargetSumWays(arr,t));
	}
}