/*
Mr Ashoka planted N trees in a land around the Flag Post which is at the center 
of the land, i.e., (0,0) position. You will be given the positions of N trees
as trees[], where tree[i]=[Xi,Yi], where Xi, Yi are the positions of i-th tree
with respect to X-axis and Y-axis. And you are also an integer C.

The distance between any two trees on the land plane is the Euclidean distance 
(i.e., sqrt((x1 - x2)^2 + (y1 - y2)^2).

Your task is to return positions of the C trees Nearest to the Flag post. 
The answer is supposed to be sorted based on distance, if the distances 
are same keep the original order of the trees[].


Input Format:
-------------
Line-1: Two space separate integers, N and C
Next N Lines: Two space separated integers, x,y

Output Format:
--------------
Print the positionf of C Nearest Trees.

Sample Input-1:
---------------
4 4
-3 -3
3 -3
3 3
-3 3

Sample Output-1:
----------------
[-3, -3] [3, -3] [3, 3] [-3, 3]


Sample Input-2:
---------------
4 3
2 -1
1 2
2 4
3 2

Sample Output-2:
----------------
[2, -1] [1, 2] [3, 2]


==== testcases ====
case =1
input =4 4
-3 -3
3 -3
3 3
-3 3
output =[-3, -3] [3, -3] [3, 3] [-3, 3]

case =2
input =4 3
2 -1
1 2
2 4
3 2
output =[2, -1] [1, 2] [3, 2]

case =3
input =6 3
1 2
2 3
2 2
4 2
5 3
3 4
output =[1, 2] [2, 2] [2, 3]

case =4
input =6 3
5 2
6 3
4 2
4 3
5 3
3 4
output =[4, 2] [4, 3] [3, 4]

case =5
input =10 5
-5 6
3 7
8 2
3 7
6 2
4 5
9 2
8 3
4 5
6 5
output =[6, 2] [4, 5] [4, 5] [3, 7] [3, 7]

case =6
input =15 8
-5 6
3 7
8 2
3 7
6 2
4 5
9 2
8 3
4 5
6 5
3 6
4 6
2 7
3 5
-4 4
output =[-4, 4] [3, 5] [6, 2] [4, 5] [4, 5] [3, 6] [4, 6] [2, 7]

case =7
input =20 8
4 7
-5 6
3 7
8 2
3 7
8 3
6 2
4 5
9 2
-10 3 
8 3
4 5
6 5
-6 5
3 6
4 6
2 7
5 5
5 6
-6 5
output =[6, 2] [4, 5] [4, 5] [3, 6] [5, 5] [4, 6] [2, 7] [3, 7]

case =8
input =25 10
4 7
-5 6
3 7
8 2
3 7
8 3
6 2
4 5
9 2
-10 3 
8 3
4 5
6 5
-6 5
3 6
4 6
2 7
5 5
5 6
-6 5
0 5
3 4
-4 -3
-5 0
3 -4
output =[0, 5] [3, 4] [-4, -3] [-5, 0] [3, -4] [6, 2] [4, 5] [4, 5] [3, 6] [5, 5]


*/
import java.util.*;

class ClosestPoints {
	public int[][] kClosest(int[][] points, int K) {
		Arrays.sort(points, (p1, p2) -> p1[0] * p1[0] + p1[1] * p1[1] - p2[0] * p2[0] - p2[1] * p2[1]);
		return Arrays.copyOfRange(points, 0, K);
	}
		
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int k=sc.nextInt();
		int[][] points=new int[n][2];
		for(int i=0;i<n;i++){
			points[i][0]=sc.nextInt();
			points[i][1]=sc.nextInt();
		}
	    int[][] result=new ClosestPoints().kClosest(points,k);
		
		for(int[] res:result)
		System.out.print(Arrays.toString(res)+" ");
	}	
}