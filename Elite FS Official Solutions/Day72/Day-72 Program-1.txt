/*
Problem Statement:
-----------------
A set of boxes are connected with each other and formed a line.
Each box is assigned with an ID, the box ID's may be repeated.

You are given the entire line as a singly linked list.
You can visit box-1 from box-0, and box-2 from box-1,.. and so on.
All the box IDs are arranged in ascending order of absolute values of IDs.

Your task is to arrange the boxes in the ascending order of original values of IDs.

Implement the class Solution:
   1. public Node sortBoxList(Node head) : 
   - returns the head node, after list is modified accordingly


Input Format:
-------------
Single line of space separated integers, box ID's in the form SLL.

Output Format:
--------------
Print the list after modification.


Sample Input:
-------------
1 2 -2 4 -4 5 6 7 8 -9 9

Sample Output:
--------------
-9 -4 -2 1 2 4 5 6 7 8 9

 
Test Cases:
----------
case =1
input =1 2 -2 4 -4 5 6 7 8 -9 9
output =-9 -4 -2 1 2 4 5 6 7 8 9

case =2
input =1 2 -2 3 -3 -4 4 -4 5 -5 6 -6 -7 7 -8 8 -9 9 10 -10
output =-10 -9 -8 -7 -6 -5 -4 -4 -3 -2 1 2 3 4 5 6 7 8 9 10

case =3
input =1 2 -2 3 -3 -4 4 -4 -9 9 10 -10 -11 11 23 34 -45 45 56 -56 -65 66
output =-65 -56 -45 -11 -10 -9 -4 -4 -3 -2 1 2 3 4 9 10 11 23 34 45 56 66

case =4
input =1 2 -2 3 -3 -4 4 -4 -9 9 10 -10 -11 11 23 -25 -26 -27 28 29 30 34 -45 45 56 -56 -65 66
output =-65 -56 -45 -27 -26 -25 -11 -10 -9 -4 -4 -3 -2 1 2 3 4 9 10 11 23 28 29 30 34 45 56 66

case =5
input =1 2 -2 3 -3 -4 4 -4 -9 9 10 -10 -11 11 -14 15 -16 17 18 20 -22 23 -25 -26 -27 28 29 30 34 -45 45 -46 46 47 48 -48 -49 49 -50 50 -53 54 -55 56 -56 -65 66
output =-65 -56 -55 -53 -50 -49 -48 -46 -45 -27 -26 -25 -22 -16 -14 -11 -10 -9 -4 -4 -3 -2 1 2 3 4 9 10 11 15 17 18 20 23 28 29 30 34 45 46 47 48 49 50 54 56 66

case =6
input =-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16 -17 -18 -19 -20 -21 -22 -23 -24 -25
output =-25 -24 -23 -22 -21 -20 -19 -18 -17 -16 -15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1

case =7
input =1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 22 24 25 26 27 28 29 30
output =1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 22 24 25 26 27 28 29 30

case =8
input =1 2 -2 3 -3 -4 4 -4 -9 9 10 -10 -11 11 -14 15 -16 17 18 20 -22 23 -25 -26 -27 28 29 30 34 -45 45 -46 46 47 48 -48 -49 49 -50 50 -53 54 -55 56 -56 -57 -58 58 59 -59 60 -60 -62 62 63 64 -65 65 66
output =-65 -62 -60 -59 -58 -57 -56 -55 -53 -50 -49 -48 -46 -45 -27 -26 -25 -22 -16 -14 -11 -10 -9 -4 -4 -3 -2 1 2 3 4 9 10 11 15 17 18 20 23 28 29 30 34 45 46 47 48 49 50 54 56 58 59 60 62 63 64 65 66

*/

Solution:
--------
import java.util.*;

class Node {
    int data;
    Node next;
    Node() {}
    Node(int data) { this.data = data; }
    Node(int data, Node next) { 
		this.data = data; 
		this.next = next; 
	}
}


class SortedLinkedList{
	public Node head = null;    
    public Node tail = null;    
    
	public void addNode(int data) {    
        //Create a new node    
        Node newNode = new Node(data);    
            
        //Checks if the list is empty    
        if(head == null) {    
            //If list is empty, both head and tail will point to new node    
            head = newNode;    
            tail = newNode;    
        }    
        else {    
            //newNode will be added after tail such that tail's next will point to newNode    
            tail.next = newNode;    
            //newNode will become new tail of the list    
            tail = newNode;    
        }    
    } 
	
	public void display() {       
        Node current = head;    
            
        if(head == null) {     
            return;    
        }    
        while(current != null) {      
            System.out.print(current.data + " ");    
            current = current.next;    
        } 
    }    
	
	public static void main(String[] args) {    
            
        SortedLinkedList sList = new SortedLinkedList();    
        Scanner sc=new Scanner(System.in);
		String sarr[]=sc.nextLine().split(" ");
        for(int i =0; i<sarr.length; i++)
			sList.addNode(Integer.parseInt(sarr[i]));       
        
        //Displays the nodes present in the list    
		Solution s=new Solution();
		sList.head=s.sortBoxList(sList.head);
		sList.display();
    }   
}
class Solution {
    public Node sortBoxList(Node head) {
        //Implement your code here
                Node prev = head;
        Node curr = head.next;
        while(curr!=null){
            if(curr.data<0) {
                prev.next = curr.next;
                curr.next = head;
                head = curr;
                curr = prev.next;
            }else{
                prev = curr;
                curr = curr.next;
            }
        }
        return head;

    }
}
