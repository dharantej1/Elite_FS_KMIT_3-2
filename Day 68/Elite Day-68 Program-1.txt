Mr Nagireddy is working with Binary Trees.
The elements of the tree is given in the level order format.
He is given a sequence of integers as an array, seq[].

You will be given the root of the binary tree.
Your task is to help Nagireddy to find the seq[] is a valid path from root node
to the last node in that tree, the order of elements in seq[] shoud be followed
i.e.,Last Node means, there should be no child to the node.


Your task is to implement the class Solution:
	- public boolean isValidSequence(BinaryTreeNode root, int seq[]):
	return a boolean result.
	
NOTE: 
Please do consider the node with data '-1' as null node in the given trees.


Input Format:
-------------
Line-1: comma separated integers, level order binary tree
Line-2: comma separated integers, a sequence

Output Format:
--------------
Print a boolean value.


Sample Input-1:
---------------
0,1,0,2,0,0,-1,-1,3,0,0
0,1,2,3

Sample Output-1:
----------------
true


Sample Input-2:
---------------
0,1,2,3,4,5,6,7,8,9,10
0,1,3

Sample Output-2:
----------------
false
import java.util.*;

/*
class BinaryTreeNode{
	public int data; 
	public BinaryTreeNode left, right; 
	public BinaryTreeNode(int data){
		this.data = data; 
		left = null; 
		right = null; 
	}
}
*/

class Solution {
    boolean isLeaf(BinaryTreeNode node){
        return (node.left==null ||node.left.data==-1)&&(node.right==null || node.right.data==-1);
    }
    boolean DFS(BinaryTreeNode root,int i,int[] seq){
        if(i==seq.length-1 && isLeaf(root) && seq[i]==root.data)
            return true;
        if(i>=seq.length || root.data!=seq[i])
            return false;
        boolean x = false;
        if(root.left!=null && root.left.data!=-1)
            x |= DFS(root.left,i+1,seq);
        if(root.right!=null && root.right.data!=-1)
            x |= DFS(root.right,i+1,seq);
        return x;
    }
    public boolean isValidSequence(BinaryTreeNode root, int[] seq) {
        //Implement Your Code here
        return DFS(root,0,seq);
    }
}