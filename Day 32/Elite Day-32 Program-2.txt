In a class of N students, each student has secured different marks in 
final exams, and different levels of decency, 
The students are numbered from 0,1,2,.. N-1.

The class teacher defines, compMarks[i] = [p,q], indiactes 
Student-p secured more marks than Student-q. This information is 
provided based on valid observations only. And, decentScore[p] = d, 
indicates Student-p has decency level- d.

Your task is to find and return the result[] as follows:
	- result[p] = q, where Student-q has the least level of decency
	  [i.e., the student-q with the smallest value of decentScore[q] ]
	  among all the students who scores >= Student-p.


Input Format:
-------------
Line-1: An integer N, number of students.
Next 'N-1' lines: Two space separated integers p and q, compMarks[i] = [p, q] 
Last Line: N space separated integers, decentScore[].

Output Format:
--------------
Print N space separated integers as result


Sample Input-1:
---------------
6
1 3
2 4
3 5
0 3
3 4
4 2 6 8 3 1

Sample Output-1:
----------------
0 1 2 1 1 5

Explanation:
------------
result[3] = 1.
Student-1 has secured more marks than Student-3,
Student-0 has secured more marks than Student-3.
Among [1, 0], the only Student who has least decentScore is Student-1.

result[4] = 1.
Student-1 has secured more marks than Student-3, who secured more marks than 3.
Student-2 has secured more marks than Student-4.
Among [1,2,3], the only Student who has least decentScore is Student-1.



#include<bits/stdc++.h>
using namespace std;
int result(int i,unordered_map<int,vector<int>> &umap,vector<int> &decscore){
    if(umap.count(i)==0){
        return i;
    }
    vector<int> u=umap[i];
    for(int i=0;i<u.size();i++){
        if(umap.count(u[i])!=0)
            u.insert(u.end(),umap[u[i]].begin(),umap[u[i]].end());
    }
    int minindex=i;
    for(int i=0;i<u.size();i++){
        if(decscore[u[i]]<decscore[minindex])
            minindex=u[i];
    }
    return minindex;
}
int main(){
    int n;
    cin>>n;
    vector<pair<int,int>> score(n-1);
    unordered_map<int,vector<int>> umap;
    vector<int> decscore(n,-1);
    for(int i=0;i<n-1;i++){
        cin>>score[i].first;
        cin>>score[i].second;
    }
    for(int i=0;i<n;i++){
        cin>>decscore[i];
    }
    for(int i=0;i<n-1;i++){
        umap[score[i].second].push_back(score[i].first);
    }
    vector<int> v(n);
    for(int i=0;i<n;i++)
        v[i]=result(i,umap,decscore);
    for(int i=0;i<v.size();i++)
        cout<<v[i]<<" ";
}