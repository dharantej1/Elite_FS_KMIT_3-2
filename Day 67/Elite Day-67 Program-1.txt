Babylonians began to measure the time in hours, minutes.
They are given the time in a diital clock as string T, the format is 'HH:MM'
They want to find the time which appears sooner after given time T in the same 
clock, consists the digits of the given time T.

Your task is to help them to find the time accordingly.

The valid timings are as follows, "02:45", "11:09" 
The invalid timings are as follows, "2:45", "11:9".


Input Format:
-------------
A String time, the range is between 00:00 to 23:59, must be HH:MM format.

Output Format:
--------------
Print the valid time, appears after T


Sample Input-1:
---------------
13:45

Sample Output-1:
----------------
13:51

Explanation:
------------
The time appears sooner after 13:45 is 13:51, which occurs 6 minutes later.
It is not 13:44, because this occurs 23 hours and 59 minutes later.


Sample Input-2:
---------------
19:49

Sample Output-2:
----------------
11:11
import java.util.*;
class Solution{
    static StringBuilder hrs,mins;
    static String time;
    static char[] chars;
    static boolean isValid(StringBuilder h,StringBuilder m){
        int hrs = Integer.parseInt(h.toString());
        int mins = Integer.parseInt(m.toString());
        return hrs<=23 && mins<=59;
    }
    static TreeSet<String> times = new TreeSet<>();
    static void fillTimes(StringBuilder h,StringBuilder m,int i){
        if(i>=4){
            if(isValid(h,m)){
                String x = h.toString()+":"+m.toString();
                times.add(x);
            }
            return;
        } 
        if(i>=2){
            for(int a=0;a<4;a++){
                m.append(chars[a]);
                fillTimes(h,m,i+1);
                m.deleteCharAt(m.length()-1);
            }
        }
        else{
            for(int a=0;a<4;a++){
                h.append(chars[a]);
                fillTimes(h,m,i+1);
                h.deleteCharAt(h.length()-1);    
            }
        }
    }
    public static void main(String... args){
        Scanner sc = new Scanner(System.in);
        String t = sc.next();
        time = t.replaceAll(":","");
        chars = time.toCharArray();
        hrs = new StringBuilder();
        mins = new StringBuilder();
        fillTimes(hrs,mins,0);
        String res = (times.higher(t)==null)?times.first():times.higher(t);
        System.out.print(res);
    }
}