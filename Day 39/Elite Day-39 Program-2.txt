A device is secured with a digital screen, 
The digital screen is made up of a 3*3 grid like below:
| 1 | 2 | 3 |
| 4 | 5 | 6 |
| 7 | 8 | 9 |

The code is generated by connecting the keys in a valid way using the grid.

Rules to create the valid codes are as follows:
	- Each code must consist of atleast m keys and atmost n keys.
	- All the keys must be distinct.
	- If the line connecting two consecutive keys 'A','B' in the code passes 
	  through any other key C, then 'C' must have already connected priorly, 
	  as a part of the code. No jumps through a key which is not part of 
	  the code are allowed.
	- The order of keys used matters.
 
You will be given two integers m and n, where 1 ≤ m ≤ n ≤ 9, 
Your task is to count the total number of valid codes can be created to 
sefeguard the device, which consist of minimum of m keys and maximum n keys. 

Examples of valid and invalid codes:
	Invalid code: 1 - 2 - 7 - 9
	Line 7 - 9, passes through key 8 which has not been part of the code.
	i.e., 1 - 2 - 7 - 9 - 8 is also an invalid code.

	Invalid code: 1 - 8 - 3 - 7
	Line 3 - 7 passes through key 5 which has not been part of the code.

	Valid code: 5 - 7 - 4 - 6 - 9   
	Line 4 - 6 is valid because it passes through key 5, which has been part 
	of the code

	Valid code: 4 - 5 - 6 - 3 - 7 - 2
	Line 3 - 7 is valid because it passes through key 5, which has been part 
	of the code

Input Format:
-------------
Two space separated integers M and N.

Output Format:
--------------
Print an integer, number of valid codes created using the digital screen.


Sample Input-1:
---------------
1 1

Sample Output-1:
----------------
9


Sample Input-2:
---------------
1 2

Sample Output-2:
----------------
65


import java.util.*;

class main{
    static int dfs(boolean[] vis,int[][] arr,int p,int n){
        if(n<0) return 0;
        if(n==0) return 1;
        vis[p] = true;
        int ans = 0;
        for(int i=1;i<10;i++){
            if(!vis[i] && (arr[p][i]==0 || vis[arr[p][i]])){
                ans+=dfs(vis,arr,i,n-1);
            }
        }
        vis[p]=false;
        return ans;
    }
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int m = sc.nextInt();
        int n = sc.nextInt();
        int[][] arr = new int[10][10];
        arr[1][3] = arr[3][1] = 2;
        arr[1][7] = arr[7][1] = 4;
        arr[1][9] = arr[9][1] = 5;
        arr[2][8] = arr[8][2] = 5;
        arr[3][7] = arr[7][3] = 5;
        arr[3][9] = arr[9][3] = 6;
        arr[4][6] = arr[6][4] = 5;
        arr[7][9] = arr[9][7] = 8;
        boolean[] vis = new boolean[10];
        int ans = 0;
        for(int i=m;i<=n;i++){
            for(int j=1;j<10;j++){
                ans+=dfs(vis,arr,j,i-1);
            }
        }
        
        System.out.println(ans);
    }
}