Gunith is interested in series and sequence problems in Maths.
Gunith is given an array A of integers, he wants to find out 
a Sequence, which is long and subsequence of given array.

Subsequence AS is the list AS[i], AS[i1], AS[i2], .... AS[ik], from the array, 
where 0 <= i< i1 < i2 < ..<ik < A.length

The sequence S has to follow this rule, S[i+1] - S[i] are all the same value 
(for 0 <= i < S.length - 1 ), and Sequence S can be formed from A

Find out the Max possible length of the Longest Sequence.

Input Format:
-------------
Line-1 -> An integer N, number of array elements
Line-2 -> N space separated integers, elements of the array.

Output Format:
--------------
Print an integer as your result.


Sample Input-1:
---------------
4
2 6 10 14

Sample Output-1:
----------------
4


Sample Input-2:
---------------
7
2 5 6 8 10 11 14

Sample Output-2:
----------------
5

Explanation:
------------
The longest possible arithmetic series is 2 5 8 11 14.



import java.util.*;

class main{
    public static void main(String... args){
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for(int i=0;i<n;i++)
            arr[i] = sc.nextInt();
        
        HashMap<Integer,Integer> memos[] = new HashMap[n];
        for(int i=0;i<n;i++){
            memos[i] = new HashMap<>();
        }
        int finalResult = 0;
        for(int i=1;i<n;i++){
            for(int j=0;j<i;j++){
                int diff = arr[j]-arr[i];
                int len = 2;
                if(memos[j].containsKey(diff)){
                    len = memos[j].get(diff)+1;    
                }
                int cur = memos[i].getOrDefault(diff,0);
                int res = Math.max(cur,len);
                memos[i].put(diff,res);
                finalResult = Math.max(finalResult,res);
            }
        }
        System.out.print(finalResult);
    }
}