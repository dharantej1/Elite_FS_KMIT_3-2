Ms Manasa is working on numbers; she is fascinated by number factors.
She is given a number N, she wants to find out all possible ways of 
obtaining N as multiple of its factors.
For example given N =12
can be written as multiple of 2,3 and 4.
and the ways to obtains 12 from ots factors are: 2*2*3, 2*6, 3*4

Your task is to help Ms Manasa to find the all possible ways of obtaining N 
from its factors and return all the possible ways as shown in the samples.

Input Format:
-------------
An integer N, value of N.

Output Format:
--------------
Print the list of possiblilties.


Sample Input-1:
---------------
12

Sample Output-1:
----------------
[[2, 2, 3], [2, 6], [3, 4]]


Sample Input-2:
---------------
16

Sample Output-2:
----------------
[[2, 2, 2, 2], [2, 2, 4], [2, 8], [4, 4]]


Sample Input-3:
---------------
32

Sample Output-3:
----------------
[[2, 2, 2, 2, 2], [2, 2, 2, 4], [2, 2, 8], [2, 4, 4], [2, 16], [4, 8]]



import java.util.*;

class main{
    static Set<List<Integer>> res;
    static void find(int cur,int i,int n,ArrayList<Integer> current,ArrayList<Integer> factors){
        if(i>=factors.size() || cur>n)
            return;
        if(cur==n){
            res.add(new ArrayList<>(current));
            return;
        }
        current.add(factors.get(i));
        find(cur*factors.get(i),i,n,current,factors);
        current.remove(current.size()-1);
        find(cur,i+1,n,current,factors);
    }
    public static void main(String... args){
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        
        //generate factors
        ArrayList<Integer> factors = new ArrayList<>();
        for(int i=2;i<=Math.sqrt(n);i++){
            if(n%i==0){
                factors.add(i);
                if(n/i!=i){
                    factors.add(n/i);
                }
            }
        }
        
        //TreeSet with comparator
        res = new TreeSet<List<Integer>>((a,b)->{
            int i=0,j=0;
            while(i<a.size() && j<b.size()){
                if(a.get(i)>b.get(j))
                    return 1;
                else if(a.get(i)<b.get(j))
                    return -1;
                i++;
                j++;
            }
            return b.size()-a.size();
        });
        
        find(1,0,n,new ArrayList<>(),factors);
        System.out.print(res);
    }
}