Ganesh is working on numbers, He is given a list of integers 1,2,3,...,N 
and the list is indexed from 1 to N.

Now he can shuffle the list in whatever way he want. Shuffled list is said 
to be valid, if one of the following is true for i-th position in the list.
	- The integer at the i-th position is divisible by i.
	- 'i' is divisible by the integer at the i-th position.

Your task is to find out, How many valid shuffles can Ganesh do?

Input Format:
-------------
An integer N, where N<=20.

Output Format:
--------------
Print an integer, number of ways ganesh can shuffle.


Sample Input-1:
---------------
1

Sample Output-1:
----------------
1

Explanation:
------------
The only shuffled list is [1]


Sample Input-2:
---------------
2

Sample Output-2:
----------------
2

Explanation:
------------
The first shuffled list is [1, 2]:
Integer at the 1st position (i=1) is 1, and 1 is divisible by i (i=1).
Integer at the 2nd position (i=2) is 2, and 2 is divisible by i (i=2).

The second shuffled list is [2, 1]:
Integer at the 1st position (i=1) is 2, and 2 is divisible by i (i=1).
Integer at the 2nd position (i=2) is 1, and i (i=2) is divisible by 1.




import java.util.*;

class main{
    static int backTrack(int cur,int n,boolean[] visited,HashMap<String,Integer> DP){
        if(cur>n){
            return 1;
            
        }
        String str = cur+"|"+Arrays.toString(visited);
        if(DP.containsKey(str))
        return DP.get(str);
        int res = 0;
        for(int i=1;i<=n;i++){
            if(!visited[i] && (i%cur==0 || cur%i==0)){
                visited[i] = true;
                res += backTrack(cur+1,n,visited, DP);
                visited[i] = false;
                
            }
            
        }
        DP.put(str,res);
        return res;
        
    }
    public static void main(String... args){
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int res = backTrack(1,n,new boolean[n+1],new HashMap<String,Integer>());
        System.out.println(res);
        
    }
    
}
