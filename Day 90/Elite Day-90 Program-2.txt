There are N cities in a state.
The cities are connected with two types of roadways:
1) concrete roadway 2) asphalt roadway.
The roadways may be parallel.

You are given the lists of concrete roadways and asphalt roadways
between the cities. All roadways are unidirectional.
Concrete_Roadway[i,j] indiactes: a concrete road from city-i to city-j. Similarly,
Asphalt[i,j] indiactes: an asphalt road from city-i to city-j. Similarly,

Your task is to find and return the list of lengths of the shortest paths from 
city-0 to city-P, where P start from 0 to N-1. And the path should contains 
alternative roadways like as follows: concrete - asphalt - concrete -asphalt --etc
or vice versa. If there is no such shortest path exist print -1.

Input Format:
-------------
Line-1: 3 space separated integers N, C & A, Number of cities, routes between the cities.
		number of concrete roads and number of asphalt roads
Next C lines: Two space separated integers, concrete road between city-i to city-j.		
Next A lines: Two space separated integers, asphalt road between city-i to city-j.		

Output Format:
--------------
Print the list of lengths, the shortest paths.


Sample Input-1:
---------------
4 2 1
0 1
2 3
1 2

Sample Output-1:
----------------
0 1 2 3

Sample Input-2:
---------------
4 2 1
1 0
2 3
1 2

Sample Output-2:
----------------
0 -1 -1 -1


Sample Input-3:
---------------
4 3 2
1 0
1 2
2 3
0 1
1 2

Sample Output-3:
----------------
0 1 2 -1



import java.util.*;

class Box{
    int v;
    int roadType;
    Box(int a,int b){
        v = a;
        roadType = b;
    }
}
class main{
    static int n,c,a;
    static boolean visited[],adj[][][];
    public static void main(String... args){
        //input
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        c = sc.nextInt();
        a = sc.nextInt();
        adj = new boolean[2][n][n];
        visited = new boolean[n];
        for(int i=0;i<c;i++){
            int x = sc.nextInt();
            int y = sc.nextInt();
            adj[0][x][y]  = true;
        }
        for(int i=0;i<a;i++){
            int x = sc.nextInt();
            int y = sc.nextInt();
            adj[1][x][y]  = true;
        }
        Queue<Box> queue = new LinkedList<>();
        int[] res = new int[n];
        queue.add(new Box(0,0));
        queue.add(new Box(0,1));
        int level = 0;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i=0;i<size;i++){
                Box front = queue.remove();
                    visited[front.v]=true;
                    res[front.v] = level;
                    for(int j=0;j<n;j++){
                        if(adj[front.roadType][front.v][j] && !visited[j]){
                            queue.add(new Box(j,front.roadType^1));    
                        }
                    }
            }
            level++;
        }
        for(int i=1;i<n;i++){
            if(res[i]==0)
                res[i]=-1;
        }
        System.out.print(Arrays.toString(res));
    }
}