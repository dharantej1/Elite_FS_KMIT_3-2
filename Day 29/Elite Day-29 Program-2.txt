The Kolar Gold Fields (KGF) is in the form of a m*n grid,
Each field, contains some amount of Gold in it.
 
You can mine the gold in the KGF in the following way.
	- You can start at any position in the grid, never visit a cell with no gold.
	- each time you visit a cell, you will grab all the gold in it.
	- You can move one step to the left, right, up or down.
	- You can't visit the same cell more than once.
	- You can stop at any cell.
	
Your task is to find the maximum amount of gold you can collect.

Input Format:
-------------
Line-1: Two integers M and N size of the KGF grid.
Next M lines: N space separated integers, gold in each row of the grid.

Output Format:
--------------
Print an integer, maximum amount of gold.


Sample Input-1:
---------------
3 3
0 6 0
5 8 7
0 9 0

Sample Output-1:
----------------
24

Explanation:
-------------
You can grab the gold in KGF grid as follows:
You can obtain like as follows: 9 -> 8 -> 7.

Sample Input-2:
---------------
5 3
1 0 7
2 0 6
3 4 5
0 3 0
9 0 20

Sample Output-2:
----------------
28

Explanation:
-------------
You can grab the gold in KGF grid as follows:
You can obtain like as follows: 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7

100/100
m,n=map(int,input().split())
l=[]
for i in range(m):
    t=list(map(int,input().split()))
    l.append(t)
def dfs(g,i,j):
    if i<0 or j<0 or i>=len(g) or j>=len(g[i]) or g[i][j]<=0:
        return 0
    g[i][j]=-g[i][j]
    res=max(dfs(g,i-1,j),dfs(g,i+1,j),dfs(g,i,j-1),dfs(g,i,j+1))
    g[i][j]=-g[i][j]
    return g[i][j]+res
res=0
for i in range(len(l)):
    for j in range(len(l[i])):
        res=max(res,dfs(l,i,j))
print(res)



50/100
def getMaximumGold(grid):
        gold = set()
        for r, row in enumerate(grid):
            for c, v in enumerate(row):
                if v:
                    gold.add((r, c))

        def path(p, rest):
            return (grid[p[0]][p[1]] +
                    max([path((i, j), rest - {(i, j)})
                        for i, j in [(p[0] + 1, p[1]), (p[0], p[1] + 1),
                                     (p[0] - 1, p[1]), (p[0], p[1] - 1)]
                        if (i, j) in rest] + [0]))

        return max([path(c, gold - {c}) for c in gold] + [0])
    
if __name__=="__main__": 
    r,c=map(int,input().split())
    l=[list(map(int,input().split()))[:r] for _ in range(c)]
    print(getMaximumGold(l))