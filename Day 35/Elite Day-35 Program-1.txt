Few people are living in a township of size N*N, where each 1*1 part 
of the township is either a villa or a swimming pool. 
You are given the structure of township as a 2d matrix of size N*N, 
filled with 0's and 1's, where '0'-indicates a swimming pool and 
'1'- indiactes a villa. 

Your task is to find a swimming pool, such that its distance to 
the nearest villa(s) is maximized, and return the distance.

If the township contains only the villas or only swimming pools, print '-1'. 

The distance used in this problem is the Manhattan distance: 
the distance between two cells (a0, b0) and (a1, b1) is |a0 - a1| + |b0 - b1|


Input Format:
-------------
Line-1: An integer N, size of the 2d matrix.
Next N lines: N space separated integers, matrix[][] either 0 or 1.

Output Format:
--------------
An integer, maximum distance.


Sample Input-1:
---------------
4
1 0 1 1
0 0 0 0
1 0 1 0
1 0 0 1

Sample Output-1:
----------------
2

Explanation: 
------------
The swimming pool at (1, 1) is with distance 2 from the nearest villas.


Sample Input-2:
---------------
4
1 0 0 0
0 0 0 0
1 0 0 0
0 1 0 1

Sample Output-2:
----------------
3

Explanation: 
------------
The swimming pool at (0,3) or (1, 2) are with distance 3 from the nearest villas.



def maxDist(n,grid):
    stack=[]
    count=0
    for i in range(n):
    	for j in range(n):
    		if grid[i][j]==1:
    			stack.append((i,j,0))
    # print(stack)
    if stack==[]:
    	return -1
    if len(stack)==n*n:
    	return -1

    def valid(i,j):
        if 0<=i<n and 0<=j<n and grid[i][j]==0:
            return True
        return False
        
    for i,j,d in stack:
    	for x,y in ((i+1,j),(i-1,j),(i,j+1),(i,j-1)):
    		if valid(x,y):
    			grid[x][y]=1
    			stack.append((x,y,d+1))
    # print(grid)
    # print(stack)
    return stack[-1][-1]


n=int(input())
grid=[list(map(int,input().split()))[:n] for _ in range(n)]
print(maxDist(n,grid))