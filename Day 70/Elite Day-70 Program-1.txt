A set of computers connected with each other and formed a network with the 
following rule, one computer can directly connected with atmost two computers only.
Each computer is assigned with an ID, the computer ID's may be repeated.

You are given the entire network as a tree.
Your task is to form the network IDs as a single string with
preorder traversal technique. The network ID should be enclosed in brackets [ ],
Empty connection or No connection represented with [].

You need to omit all the empty bracket pairs that don't affect the one-to-one 
mapping relationship between the string and the original network.

Implement the class Solution:
   1. public String networkToString(BinaryTreeNode t) : returns a String.

NOTE: in the input tree, consider -1 as 'No Connection'.


Input Format:
-------------
Single line of space separated integers, network ID's in the form the tree.

Output Format:
--------------
Print a string, as described in sample.


Sample Input-1:
---------------
2 5 2 3 4 2

Sample Output-1:
----------------
2[5[3][4]][2[2]]


Sample Input-2:
---------------
2 5 2 -1 -1 -1 3

Sample Output-2:
----------------
2[5][2[][3]]

import java.util.*;

/*
// for reference
class BinaryTreeNode{
	public int data; 
	public BinaryTreeNode left, right; 
	public BinaryTreeNode(int data){
		this.data = data; 
		left = null; 
		right = null; 
	}
}
*/

class Solution {
    StringBuilder res = new StringBuilder();
    StringBuilder preorder(BinaryTreeNode root){
        if(root==null || root.data==-1)
            return new StringBuilder();
        StringBuilder res = new StringBuilder();
        res.append(root.data);
        if((root.left==null || root.left.data==-1) && (root.right==null || root.right.data==-1))
            return res;
        res.append("[");
        if(root.left!=null && root.left.data!=-1)
            res.append(preorder(root.left));
        res.append("]");
        if(root.right!=null && root.right.data!=-1){
            res.append("[");
            res.append(preorder(root.right));
            res.append("]");
        }
        return res;
    }
    public String networkToString(BinaryTreeNode t) {
        // Implement Your code here.
        return preorder(t).toString();
    }
}