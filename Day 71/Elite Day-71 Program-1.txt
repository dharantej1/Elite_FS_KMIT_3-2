A binary word Bn is formed as follows:
    B[1] = "0"
    B[i+1] =  B[i] $ "1" $ reverse(complement(B[i])) for i > 1

where $ denotes the concatenation operation, reverse(complement(B)) returns 
the reversed word of complement(B), which perform 1's complement of B 
(0 changes to 1 and 1 changes to 0).

For example, the first 4 words in the above sequence are:

    B[1] = "0"
    B[2] = "011"
    B[3] = "0111001"
    B[4] = "011100110110001"

Return the Pth bit in B[N]. It is guaranteed that P is valid for the given N.

Input Format:
-------------
Line-1: Two space seperated integers represents N and P.

Output Format:
--------------
Return a bit (0 or 1).


Sample Input-1:
---------------
3 4

Sample Output-1:
----------------
1

Explanation:
------------
B[3] = "0111001" and 4th bit is 1.

Sample Input-2:
---------------
4 10

Sample Output-2:
----------------
1

Explanation:
-------------
B[4] = "011100110110001" and 10th bit is 1.
import java.util.*;

class Solution{
    static StringBuilder complementReverse(StringBuilder str){
        StringBuilder res = new StringBuilder();
        for(int i=str.length()-1;i>=0;i--){
            char c = str.charAt(i);
            if(c=='0')
                res.append("1");
            else
                res.append("0");
        }
        return res;
    }
    static int getResult(int n,int p){
        StringBuilder res = new StringBuilder("0");
        while(res.length()<p){
            StringBuilder x = complementReverse(res); 
            res.append("1");
            res.append(x);
        }
        return res.charAt(p-1)-'0';
    }
    public static void main(String... args){
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int p = sc.nextInt();
        System.out.print(getResult(n,p));
    }
}