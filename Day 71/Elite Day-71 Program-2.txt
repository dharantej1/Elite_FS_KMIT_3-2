Arjun wants to build some homes in a land of size R*C.
He wanted to construct homes in rectangular shape.
The place which is remained will be used for gradening.
Accordingly he has prepared the plan and given as
an 2d array plan[][], where 1 indicates home, and 0 indicates garden area.

A home is set of cells with value 1 in rectangular shape.
He wants to findout all the homes in the plan and store their co-ordinates in 
the following order, coords[i] = [x1,y1,x2,y2], where (x1,y1) is the starting
co-ordinate (top left corner), and (x2,y2) is the ending co-ordinate 
(bottom right corner) of i-th home.

Your task is to help Arjun to find all the homes and return the coords[][] of 
all the homes from top left corner to bottom right corner.

NOTE: No two homes are adjacent to each other in 4 directions,
(left, right, top, bottom).

Input Format:
-------------
Line-1: Two integers R and C, size of the land.
Next R lines: C space separated integers, either 0 or 1
0- represents garden area land and 1- represents the home.

Output Format:
--------------
Print 2d array, the co-ordinates of all homes.


Sample Input-1:
---------------
2 3
1 0 0
0 1 1
 
Sample Output-1:
----------------
[0, 0, 0, 0][1, 1, 1, 2]


Sample Input-2:
---------------
4 4
1 1 0 1
0 0 0 0
1 1 0 1
1 1 0 1
 
Sample Output-2:
----------------
[0, 0, 0, 1][0, 3, 0, 3][2, 0, 3, 1][2, 3, 3, 3]

import java.util.*;
class Coord{
    int x, y;
    Coord(int a,int b){
        x = a;
        y = b;
    }
}
class Solution{
    static int m,n,arr[][],dirs[][]={{1,0},{1,1},{0,1}};
    static boolean isValid(int i,int j){
        return !((i<0 || i>=m) || (j<0 || j>=n));    
    }
    static boolean zeroCell(int i,int j){
        if(!isValid(i,j))
            return true;
        return arr[i][j]==0;
    }
    static Coord DFS(int i,int j){
        if(!isValid(i,j) || arr[i][j]<=0)
            return null;
        arr[i][j] *= -1;
        boolean flag = true;
        for(int dir[]:dirs){
            if(!(dir[0]==1 && dir[1]==1))
                flag = flag && zeroCell(i+dir[0],j+dir[1]);   
        }
        if(flag)
            return new Coord(i,j);
        Coord res;
        for(int dir[]:dirs){
            Coord x = DFS(i+dir[0],j+dir[1]);
            if(x!=null)
                return x;
        }    
        return null;
    }
    public static void main(String... args){
        Scanner sc = new Scanner(System.in);
        m = sc.nextInt();
        n = sc.nextInt();
        arr = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                arr[i][j] = sc.nextInt();
            }
        }
        ArrayList<ArrayList<Integer>> res = new ArrayList<>();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                Coord obj = DFS(i,j);
                if(obj!=null){
                    ArrayList<Integer> t = new ArrayList<>();
                    t.add(i);
                    t.add(j);
                    t.add(obj.x);
                    t.add(obj.y);
                    res.add(t);
                }
            }    
        }
        for(List<Integer> a:res){
            System.out.print(a);
        }
    }
}